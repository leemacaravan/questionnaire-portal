<!-- Softr HTML Block (robust webhook parse + utilities pills + preferred policy order) -->
<div class="container">
  <div class="outer-card">
    <div class="page-title">Basic building information</div>
    <div class="subtitle">Essential building information available at no charge. This includes fees, policies, and application documents.</div>

    <div class="info-card">
      <div class="card-title">üíµ Basic building information</div>
      <div class="card-subtitle">Essential building information available at no charge</div>
    </div>

    <!-- Section: Fees -->
    <div class="section">
      <button class="section-head" type="button" data-target="#fees-section">
        <div class="head-left"><span class="head-icon">$</span><div><div class="head-title">Building Fees</div><div class="head-caption">Move in/out fees, deposits, application fees</div></div></div>
        <span class="chevron">‚ñæ</span>
      </button>
      <div class="section-body" id="fees-section">Loading fees...</div>
    </div>

    <!-- Section: Fee Policies -->
    <div class="section">
      <button class="section-head" type="button" data-target="#fee-policies-section">
        <div class="head-left"><span class="head-icon">üìÑ</span><div><div class="head-title">Building Fee Policies</div><div class="head-caption">Flip tax, sublet fee, capital contribution</div></div></div>
        <span class="chevron">‚ñæ</span>
      </button>
      <div class="section-body" id="fee-policies-section">Loading fee policies...</div>
    </div>

    <!-- Section: Building Policies -->
    <div class="section">
      <button class="section-head" type="button" data-target="#building-policies-section">
        <div class="head-left"><span class="head-icon">üèõÔ∏è</span><div><div class="head-title">Building Policies</div><div class="head-caption">House rules, leasing, ownership allowances</div></div></div>
        <span class="chevron">‚ñæ</span>
      </button>
      <div class="section-body" id="building-policies-section">Loading policies...</div>
    </div>

    <div class="section" style="display:none">
      <button class="section-head" type="button" data-target="#documents-section">
        <div class="head-left"><span class="head-icon">üìé</span><div><div class="head-title">Application Documents</div><div class="head-caption">Files and policies</div></div></div>
        <span class="chevron">‚ñæ</span>
      </button>
      <div class="section-body" id="documents-section">Loading documents...</div>
    </div>
  </div>
</div>

<style>
  :root{ --border:#e5e7eb; --bg:#f9fafb; --fg:#111827; --muted:#6b7280; --brand:#2563eb; --row-bg:#ffffff; }
  body{ background:var(--bg); }
  .container{ max-width:960px; margin:auto; font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; padding:40px 20px; color:var(--fg);} 
  .outer-card{ background:#fff; border:1px solid var(--border); padding:28px; box-shadow:0 4px 10px rgba(0,0,0,.04); border-radius:12px;}
  .page-title{ font-size:28px; font-weight:800; text-align:center; margin:6px 0;}
  .subtitle{ text-align:center; color:var(--muted); font-size:14px; margin-bottom:22px;}
  .info-card{ background:#ecfdf5; border:1px solid #d1fae5; border-radius:12px; padding:16px 18px; margin-bottom:20px;}
  .card-title{ font-weight:700; font-size:16px;}
  .card-subtitle{ font-size:13px; color:#047857; margin-top:2px;}

  .section{ border:1px solid var(--border); border-radius:12px; margin:16px 0; overflow:hidden; background:#fff;}
  .section + .section{ margin-top:18px; }
  .section-head{ width:100%; display:flex; align-items:center; justify-content:space-between; background:#f3f4f6; border:0; padding:14px 16px; cursor:pointer; font:inherit; text-align:left; }
  .section-head:hover{ background:#eef2f7; }
  .head-left{ display:flex; gap:12px; align-items:center;}
  .head-icon{ width:28px; height:28px; display:inline-grid; place-items:center; background:#e0f2fe; color:#0369a1; border-radius:8px; font-weight:700; }
  .head-title{ font-weight:700; }
  .head-caption{ font-size:12px; color:var(--muted); margin-top:2px; }
  .chevron{ transition:transform .25s ease; }
  .section.open .chevron{ transform:rotate(-180deg); }

  .section-body{ display:none; padding:14px; background:#fff; }
  .section.open .section-body{ display:block; }

  .section-body h4{ font-size:12px; text-transform:uppercase; letter-spacing:.04em; color:#6b7280; margin:14px 4px 8px; }

  .data-row{ display:flex; align-items:center; justify-content:space-between; gap:16px; padding:14px 16px; background:var(--row-bg); border:1px solid var(--border); border-radius:10px; margin:8px 0; }
  .label{ font-weight:500; flex:0 0 280px; color:var(--fg); }
  .value{ font-weight:700; color:var(--fg); text-align:right; white-space:pre-wrap; word-break:break-word; }
  .value a{ color:var(--brand); text-decoration:underline; }
  .data-row:hover{ background:#fbfcff; }

  .read-more{ display:inline-block; margin-top:8px; padding:0; border:0; background:none; color:#2563eb; font:inherit; font-weight:700; cursor:pointer; text-decoration:underline; }

  /* CHIP/TAG boxes ‚Äì used ONLY for Utilities/HVAC */
  .pills{ display:flex; flex-wrap:wrap; gap:6px; justify-content:flex-end; }
  .pill{ display:inline-flex; align-items:center; padding:4px 8px; border-radius:7px; font-size:12px; line-height:1; font-weight:600; border:1px solid var(--border); background:#f8fafc; color:#0f172a; }
  .pill:nth-child(7n+1){ background:#e6f0ff; color:#1e3a8a; border-color:#c7d2fe; }
  .pill:nth-child(7n+2){ background:#e6fffb; color:#0f766e; border-color:#99f6e4; }
  .pill:nth-child(7n+3){ background:#e8fff2; color:#065f46; border-color:#a7f3d0; }
  .pill:nth-child(7n+4){ background:#fff6e6; color:#92400e; border-color:#fde68a; }
  .pill:nth-child(7n+5){ background:#ffeaf5; color:#9d174d; border-color:#fbcfe8; }
  .pill:nth-child(7n+6){ background:#ffeaea; color:#991b1b; border-color:#fecaca; }
  .pill:nth-child(7n+7){ background:#f0e9ff; color:#5b21b6; border-color:#ddd6fe; }
</style>

<script>
(()=>{ 'use strict';

(function attachWhenSoftrReady(){
  const run = () => requestAnimationFrame(init);
  document.addEventListener('spr:rendered', run, { once:true });
  document.addEventListener('DOMContentLoaded', run, { once:true });
  setTimeout(()=>{ if(!window.__blkReady) run(); }, 300);
})();

function init(){
  if(window.__blkReady) return;
  const root = document.querySelector('.outer-card');
  if(!root){ requestAnimationFrame(init); return; }
  window.__blkReady = true;

  document.querySelectorAll('.section-head').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      const section = btn.closest('.section');
      const open = section.classList.contains('open');
      document.querySelectorAll('.section').forEach(s=>s.classList.remove('open'));
      if(!open) section.classList.add('open');
    });
  });
  document.querySelector('.section')?.classList.add('open');

  document.addEventListener('click', (e)=>{
    const btn = e.target.closest('.read-more');
    if(!btn) return;
    const wrap = btn.parentElement;
    const shortEl = wrap.querySelector('.text-short');
    const fullEl  = wrap.querySelector('.text-full');
    const expanded = btn.getAttribute('aria-expanded') === 'true';
    if(shortEl && fullEl){
      shortEl.style.display = expanded ? '' : 'none';
      fullEl.style.display  = expanded ? 'none' : '';
      btn.textContent = expanded ? 'Read more' : 'Read less';
      btn.setAttribute('aria-expanded', String(!expanded));
    }
  });

  fetchData().catch(console.error);
}

async function fetchData(){
  const qs = new URLSearchParams(window.location.search);
  const buildingId = qs.get('buildingId');
  if(!buildingId) return;

  const cached = sessionStorage.getItem(buildingId);
  const data = cached ? JSON.parse(cached) : await webhook(buildingId);
  const normalized = Array.isArray(data) ? (data[0] || {}) : data;
  sessionStorage.setItem(buildingId, JSON.stringify(normalized));
  render(normalized);
}

// --- Robustly extract JSON from noisy responses ---
function extractJsonFromRaw(raw){
  let txt = raw.replace(/^\)\]\}'\n?/, '').replace(/^[^\[{]*?(?=[\[{])/, '');
  try { return JSON.parse(txt); } catch {}
  const openIdx = txt.search(/[\[{]/);
  if(openIdx === -1) throw new Error('No JSON braces in response');
  const openCh = txt[openIdx];
  const closeCh = openCh === '{' ? '}' : ']';
  let depth = 0, inStr = false, esc = false, endIdx = -1;
  for(let i=openIdx;i<txt.length;i++){
    const c = txt[i];
    if(inStr){ if(esc){ esc=false; continue; } if(c==='\\'){ esc=true; } else if(c==='"'){ inStr=false; } continue; }
    if(c==='"'){ inStr=true; continue; }
    if(c===openCh) depth++; else if(c===closeCh){ depth--; if(depth===0){ endIdx=i; break; } }
  }
  if(endIdx!==-1){
    const slice = txt.slice(openIdx, endIdx+1);
    try { return JSON.parse(slice); } catch {}
    const repaired = slice.replace(/,\s*(?=[}\]])/g,'');
    return JSON.parse(repaired);
  }
  throw new Error('Could not balance JSON braces');
}

async function webhook(buildingId){
  const res = await fetch('https://hook.us1.make.com/uaahksz3fcajpj1eixp9unaxnkkumhr7',{
    method:'POST', headers:{ 'Content-Type':'application/json', 'Accept':'application/json, text/plain, */*' },
    body:JSON.stringify({ buildingId })
  });
  const raw = await res.text();
  // Guard: if Make responds with 202/Accepted (no JSON), fall back to cache or error nicely
  if (res.status === 202 || /^\s*Accepted\s*$/i.test(raw)){
    const cached = sessionStorage.getItem(buildingId);
    if (cached) return JSON.parse(cached);
    throw new Error('Backend returned 202 Accepted without JSON. Configure a Webhook response to return JSON.');
  }
  try { return extractJsonFromRaw(raw); } catch(e){
    console.error('Webhook body (first 400 chars):', raw.slice(0,400));
    throw new Error('Webhook returned non-JSON.');
  }
}

/* ---------- config ---------- */
const MAX_DOC_LINKS = Infinity;
const EXPAND_CHAR_LIMIT = 320;
const byId = id => document.getElementById(id);
const fallback = '-';

const meaningful = (v)=>{
  if (v == null) return false;
  if (Array.isArray(v)) return v.some(meaningful);
  if (typeof v === 'object') return Object.values(v).some(meaningful);
  const s = String(v).trim();
  if (!s) return false;
  return !['-','n/a','na','not applicable','none','null','undefined'].includes(s.toLowerCase());
};

const val = (obj,key)=>{
  const raw = obj?.[key];
  return meaningful(raw) ? (typeof raw === 'number' ? raw : String(raw).trim()) : fallback;
};

const dollar = v => meaningful(v) ? `$${v}` : fallback;

const makeExpandable = (html)=>{
  if (/<a\s/i.test(html) || html.length <= EXPAND_CHAR_LIMIT) return html;
  const short = html.slice(0, EXPAND_CHAR_LIMIT).replace(/\s+\S*$/,'') + '‚Ä¶';
  return `<span class="text-short">${short}</span><span class="text-full" style="display:none">${html}</span><button class="read-more" type="button" aria-expanded="false">Read more</button>`;
};

const renderRow = (label, valueHtml)=> `<div class="data-row"><span class="label">${label}</span><span class="value">${valueHtml}</span></div>`;

const renderRowIf = (label, raw, {expand=true}={})=>{
  if(!meaningful(raw)) return '';
  const html = expand ? makeExpandable(String(raw)) : String(raw);
  return renderRow(label, html);
};

/* --------- CHIP HELPERS (Utilities/HVAC only) --------- */
const SPLIT_REGEX = /\s*(?:,|;|\/|\||‚Ä¢|&|\band\b)\s*/i;
const toChipItems = (v)=>{
  if (Array.isArray(v)){
    return v.flatMap(x => {
      if (x == null) return [];
      if (typeof x === 'string') return x.split(SPLIT_REGEX).map(s=>s.trim()).filter(Boolean);
      if (typeof x === 'object' && 'name' in x) return [String(x.name).trim()].filter(Boolean);
      return [String(x).trim()].filter(Boolean);
    });
  }
  if (v && typeof v === 'object'){
    const guess = v.value || v.text || v.name || v.label;
    if (guess) return String(guess).split(SPLIT_REGEX).map(s=>s.trim()).filter(Boolean);
  }
  if (typeof v === 'string'){
    const s = v.trim().replace(/^\[(.*)\]$/,'$1');
    try { if (s.startsWith('[') && s.endsWith(']')) return JSON.parse(s).map(x=>String(x).trim()).filter(Boolean); } catch {}
    return s.split(SPLIT_REGEX).map(t=>t.trim()).filter(Boolean);
  }
  return [];
};
const renderChips = (items)=> items.length ? `<div class="pills">${items.map(t=>`<span class="pill">${t}</span>`).join('')}</div>` : '';
const isChipField = (label) => /(utilities\s*included|utilities|hvac)/i.test(String(label));

/* JSON extraction for attachments embedded as strings */
function extractJsonObjects(str){
  const out=[]; let depth=0, start=-1, inStr=false, esc=false;
  for(let i=0;i<str.length;i++){
    const ch=str[i];
    if(inStr){ if(esc){esc=false; continue;} if(ch==='\\'){esc=true; continue;} if(ch==='"'){inStr=false;}
      continue;
    }
    if(ch==='"'){ inStr=true; continue; }
    if(ch==='{'){ if(depth===0) start=i; depth++; }
    else if(ch==='}'){ depth--; if(depth===0 && start!==-1){ out.push(str.slice(start, i+1)); start=-1; } }
  }
  return out;
}

function normalizeAttachments(field){
  const out=[];
  const pushMaybe = att=>{ if(!att||!att.url) return; const url=String(att.url).replace(/\s/g,'%20'); if(!out.some(x=>x.url===url)) out.push({ url, filename: att.filename || 'Policy' }); };
  const fromString = s=>{
    const str=s.trim();
    if(str.startsWith('{') && str.endsWith('}')){ try{ pushMaybe(JSON.parse(str)); return; }catch{} }
    const blobs=extractJsonObjects(str);
    if(blobs.length){ blobs.forEach(b=>{ try{ pushMaybe(JSON.parse(b)); }catch{} }); return; }
    (str.match(/https?:\/\/[^\s"']+/g)||[]).forEach(u=>pushMaybe({url:u, filename:'Policy'}));
  };
  const fromEntry = e=>{ if(!e) return; if(Array.isArray(e)) e.forEach(fromEntry); else if(typeof e==='object') pushMaybe(e); else if(typeof e==='string') fromString(e); };
  fromEntry(field);
  return out;
}
const uniqueByUrl = arr => { const s=new Set(); return arr.filter(a => (a.url && !s.has(a.url)) ? (s.add(a.url), true) : false); };

/* ---------- render ---------- */
function render(data){
  const feesEl = byId('fees-section');
  const feePoliciesEl = byId('fee-policies-section');
  const buildingPoliciesEl = byId('building-policies-section');
  const documentsEl = byId('documents-section');
  if(!feesEl || !feePoliciesEl || !buildingPoliciesEl || !documentsEl) return;

  const fees = data.fees || {};
  const feePolicies = data.feePolicies || {};
  const buildingPolicies = data.buildingPolicies || {};

  /* Fees */
  const salesHtml = [
    renderRowIf('Application Fee (Sale)', dollar(val(fees.sales||{}, 'Sale building application fee')), {expand:false}),
    renderRowIf('Move-in Fee (Sale)', dollar(val(fees.sales||{}, 'Sale move in fee')), {expand:false}),
    renderRowIf('Move-out Fee (Sale)', dollar(val(fees.sales||{}, 'Sale move out fee')), {expand:false}),
    renderRowIf('Security Deposit (Sale)', dollar(val(fees.sales||{}, 'Sale move in deposit')), {expand:false}),
    renderRowIf('Board Package Fee (Sale)', dollar(val(fees.sales||{}, 'Sale move out deposit')), {expand:false}),
  ].join('');

  const leaseHtml = [
    renderRowIf('Application Fee (Sublet)', dollar(val(fees.leases||{}, 'Lease building application fee')), {expand:false}),
    renderRowIf('Move-in Fee (Sublet)', dollar(val(fees.leases||{}, 'Lease move in fee')), {expand:false}),
    renderRowIf('Move-out Fee (Sublet)', dollar(val(fees.leases||{}, 'Lease move out fee')), {expand:false}),
    renderRowIf('Security Deposit (Sublet)', dollar(val(fees.leases||{}, 'Lease move in deposit')), {expand:false}),
  ].join('');

  const altPct = val(fees.alterations||{}, 'Alteration sec deposit (%)');
  const altHtml = meaningful(altPct) ? renderRow('Alteration Security Deposit (%)', `${altPct}%`) : '';

  feesEl.innerHTML = `${salesHtml ? '<h4>Sales</h4>'+salesHtml : ''}${leaseHtml ? '<h4>Leases</h4>'+leaseHtml : ''}${altHtml ? '<h4>Alterations</h4>'+altHtml : ''}` || renderRow('Fees','No fee data');

  /* Fee Policies */
  const feePolicyRows = [
    ['Flip Tax', val(feePolicies,'Flip Tax')],
    ['Sublet Fee', val(feePolicies,'Sublet Fee')],
    ['Capital Contribution', val(feePolicies,'Capital Contribution')],
  ].map(([label,value])=>renderRowIf(label, value)).join('');
  feePoliciesEl.innerHTML = feePolicyRows || renderRow('Fee Policies','No policy data');

  /* Building Policies ‚Äî preferred order first, then the rest */
  const rows=[];
  const preferredOrder = [
    'LLCs allowed',
    'Trusts allowed',
    'Gifting allowed?',
    'Fee simple',
    'Right of First Refusal',
    'Pet Policy',
    'Sublet policy?'
  ];
  const keySet = new Set(Object.keys(buildingPolicies));
  const visited = new Set();

  // sublet key detection (handles variations like "Sublet policy", "Sublet Policy?", etc.)
  const subletKey = Array.from(keySet).find(k => k.toLowerCase().startsWith('sublet policy'));

  // attachments for sublet
  const subletDocField = data.Documents?.['Sublet policy document'] ?? buildingPolicies['Sublet policy document'];
  const subletProofField = feePolicies['Proof for policies and fees'] ?? buildingPolicies['Proof for policies and fees'] ?? data.Documents?.['Proof for policies and fees'];
  const subletLinks = uniqueByUrl([...normalizeAttachments(subletDocField), ...normalizeAttachments(subletProofField)]).slice(0, MAX_DOC_LINKS);

  const renderOne = (k, v)=>{
    if (!meaningful(v)) return;
    if (isChipField(k)){
      const items = toChipItems(v);
      if (items.length){ rows.push(renderRow(k, renderChips(items))); return; }
    }
    if (subletKey && k === subletKey && subletLinks.length){
      const links = subletLinks.map((a,i)=>`<a href="${a.url}" target="_blank" rel="noopener">Policy ${i+1}</a>`).join('<br>');
      rows.push(renderRow(k, links));
      return;
    }
    let text = v;
    if (Array.isArray(v)) text = v.map(x => String(x).trim()).filter(Boolean).join(', ');
    rows.push(renderRow(k, makeExpandable(String(text))));
  };

  // 1) Preferred fields in requested order
  preferredOrder.forEach(label => {
    const actualKey = (label.toLowerCase().startsWith('sublet policy')) ? (subletKey || label) : label;
    if (keySet.has(actualKey)){
      visited.add(actualKey);
      renderOne(actualKey, buildingPolicies[actualKey]);
    }
  });

  // 2) The rest (everything not yet rendered), original order preserved
  Array.from(keySet).forEach(k => {
    if (visited.has(k)) return;
    renderOne(k, buildingPolicies[k]);
  });

  buildingPoliciesEl.innerHTML = rows.join('') || renderRow('Policies','No policy data');
  documentsEl.innerHTML = '';
}
})();
</script>
