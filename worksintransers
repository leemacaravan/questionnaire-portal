<!-- Softr HTML Block (3-line clamp + clean links + utilities pills + preferred order) -->
<div class="container">
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-content">
      <div class="loading-spinner"></div>
      <div class="loading-text">Loading building information...</div>
    </div>
  </div>

  <!-- Error Message -->
  <div id="error-message" class="error-message" style="display: none;">
    <div class="error-content">
      <span class="error-icon">⚠️</span>
      <div class="error-text"></div>
      <button class="error-retry-btn" onclick="window.refreshData()">Try Again</button>
    </div>
  </div>

  <div class="outer-card">
    <div class="page-title">Basic building information</div>
    <div class="subtitle">Essential building information including fees, policies, and application documents.</div>

    <!-- Print icon in top right of Basic building information card -->
    <button class="print-icon" onclick="window.print()" aria-label="Print">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <g clip-path="url(#clip0_672_8096)">
          <path d="M6 19H3C2.73478 19 2.48043 18.8946 2.29289 18.7071C2.10536 18.5196 2 18.2652 2 18V8C2 7.73478 2.10536 7.48043 2.29289 7.29289C2.48043 7.10536 2.73478 7 3 7H6V3C6 2.73478 6.10536 2.48043 6.29289 2.29289C6.48043 2.10536 6.73478 2 7 2H17C17.2652 2 17.5196 2.10536 17.7071 2.29289C17.8946 2.48043 18 2.73478 18 3V7H21C21.2652 7 21.5196 7.10536 21.7071 7.29289C21.8946 7.48043 22 7.73478 22 8V18C22 18.2652 21.8946 18.5196 21.7071 18.7071C21.5196 18.8946 21.2652 19 21 19H18V21C18 21.2652 17.8946 21.5196 17.7071 21.7071C17.5196 21.8946 17.2652 22 17 22H7C6.73478 22 6.48043 21.8946 6.29289 21.7071C6.10536 21.5196 6 21.2652 6 21V19ZM6 17V16C6 15.7348 6.10536 15.4804 6.29289 15.2929C6.48043 15.1054 6.73478 15 7 15H17C17.2652 15 17.5196 15.1054 17.7071 15.2929C17.8946 15.4804 18 15.7348 18 16V17H20V9H4V17H6ZM8 4V7H16V4H8ZM8 17V20H16V17H8ZM5 10H8V12H5V10Z" fill="#1A1A1A"/>
        </g>
        <defs>
          <clipPath id="clip0_672_8096">
            <rect width="24" height="24" fill="white"/>
          </clipPath>
        </defs>
      </svg>
    </button>

    <!-- Section: Fees -->
    <div class="section">
      <button class="section-head" type="button" data-target="#fees-section">
        <div class="head-left">
          <span class="head-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_672_11252)">
                <path d="M3 3H21C21.2652 3 21.5196 3.10536 21.7071 3.29289C21.8946 3.48043 22 3.73478 22 4V20C22 20.2652 21.8946 20.5196 21.7071 20.7071C21.5196 20.8946 21.2652 21 21 21H3C2.73478 21 2.48043 20.8946 2.29289 20.7071C2.10536 20.5196 2 20.2652 2 20V4C2 3.73478 2.10536 3.48043 2.29289 3.29289C2.48043 3.10536 2.73478 3 3 3ZM20 11H4V19H20V11ZM20 9V5H4V9H20ZM14 15H18V17H14V15Z" fill="currentColor"/>
              </g>
              <defs>
                <clipPath id="clip0_672_11252">
                  <rect width="24" height="24" fill="white"/>
                </clipPath>
              </defs>
            </svg>
          </span>
          <div>
            <div class="head-title">Building Fees</div>
            <div class="head-caption">Move in/out fees, deposits, application fees</div>
          </div>
        </div>
        <span class="chevron" aria-hidden="true">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_672_14492)">
              <path d="M12 13.1719L16.95 8.22192L18.364 9.63592L12 15.9999L5.63599 9.63592L7.04999 8.22192L12 13.1719Z" fill="currentColor"/>
            </g>
            <defs>
              <clipPath id="clip0_672_14492">
                <rect width="24" height="24" fill="white"/>
              </clipPath>
            </defs>
          </svg>
        </span>      </button>
      <div class="section-body" id="fees-section">Loading fees...</div>
    </div>

    <!-- Section: Fee Policies -->
    <div class="section">
      <button class="section-head" type="button" data-target="#fee-policies-section">
        <div class="head-left">
          <span class="head-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_672_10392)">
                <path d="M21 8V20.993C21.0009 21.1243 20.976 21.2545 20.9266 21.3762C20.8772 21.4979 20.8043 21.6087 20.7121 21.7022C20.6199 21.7957 20.5101 21.8701 20.3892 21.9212C20.2682 21.9723 20.1383 21.9991 20.007 22H3.993C3.72981 22 3.47739 21.8955 3.2912 21.7095C3.105 21.5235 3.00027 21.2712 3 21.008V2.992C3 2.455 3.449 2 4.002 2H14.997L21 8ZM19 9H14V4H5V20H19V9ZM8 7H11V9H8V7ZM8 11H16V13H8V11ZM8 15H16V17H8V15Z" fill="currentColor"/>
              </g>
              <defs>
                <clipPath id="clip0_672_10392">
                  <rect width="24" height="24" fill="white"/>
                </clipPath>
              </defs>
            </svg>
          </span>
          <div>
            <div class="head-title">Building Fee Policies</div>
            <div class="head-caption">Flip tax, sublet fee, capital contribution</div>
          </div>
        </div>
        <span class="chevron" aria-hidden="true">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_672_14492)">
              <path d="M12 13.1719L16.95 8.22192L18.364 9.63592L12 15.9999L5.63599 9.63592L7.04999 8.22192L12 13.1719Z" fill="currentColor"/>
            </g>
            <defs>
              <clipPath id="clip0_672_14492">
                <rect width="24" height="24" fill="white"/>
              </clipPath>
            </defs>
          </svg>
        </span>      </button>
      <div class="section-body" id="fee-policies-section">Loading fee policies...</div>
    </div>

    <!-- Section: Building Policies -->
    <div class="section">
      <button class="section-head" type="button" data-target="#building-policies-section">
        <div class="head-left">
          <span class="head-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_672_8256)">
                <path d="M22 21H2V19H3V4C3 3.73478 3.10536 3.48043 3.29289 3.29289C3.48043 3.10536 3.73478 3 4 3H18C18.2652 3 18.5196 3.10536 18.7071 3.29289C18.8946 3.48043 19 3.73478 19 4V9H21V19H22V21ZM17 19H19V11H13V19H15V13H17V19ZM17 9V5H5V19H11V9H17ZM7 11H9V13H7V11ZM7 15H9V17H7V15ZM7 7H9V9H7V7Z" fill="currentColor"/>
              </g>
              <defs>
                <clipPath id="clip0_672_8256">
                  <rect width="24" height="24" fill="white"/>
                </clipPath>
              </defs>
            </svg>
          </span>
          <div>
            <div class="head-title">Building Policies</div>
            <div class="head-caption">House rules, leasing, ownership allowances</div>
          </div>
        </div>
        <span class="chevron" aria-hidden="true">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_672_14492)">
              <path d="M12 13.1719L16.95 8.22192L18.364 9.63592L12 15.9999L5.63599 9.63592L7.04999 8.22192L12 13.1719Z" fill="currentColor"/>
            </g>
            <defs>
              <clipPath id="clip0_672_14492">
                <rect width="24" height="24" fill="white"/>
              </clipPath>
            </defs>
          </svg>
        </span>      </button>
      <div class="section-body" id="building-policies-section">Loading policies...</div>
    </div>
    
    <!-- Section: Application Documents -->
    <div class="section application-docs">
      <button class="section-head" type="button" data-target="#application-documents-section">
        <div class="head-left">
          <span class="head-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_672_4242)">
                <path d="M4 2C3.73478 2 3.48043 2.10536 3.29289 2.29289C3.10536 2.48043 3 2.73478 3 3V21C3 21.2652 3.10536 21.5196 3.29289 21.7071C3.48043 21.8946 3.73478 22 4 22H20C20.2652 22 20.5196 21.8946 20.7071 21.7071C20.8946 21.5196 21 21.2652 21 21V8L15 2H4ZM14 3.5L19.5 9H14V3.5ZM7 11H17V13H7V11ZM7 15H17V17H7V15Z" fill="currentColor"/>
              </g>
              <defs>
                <clipPath id="clip0_672_4242">
                  <rect width="24" height="24" fill="white"/>
                </clipPath>
              </defs>
            </svg>
          </span>
          <div>
            <div class="head-title">Application Documents</div>
            <div class="head-caption">Forms and submission info</div>
          </div>
        </div>
        <span class="chevron" aria-hidden="true">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_672_14492)">
              <path d="M12 13.1719L16.95 8.22192L18.364 9.63592L12 15.9999L5.63599 9.63592L7.04999 8.22192L12 13.1719Z" fill="currentColor"/>
            </g>
            <defs>
              <clipPath id="clip0_672_14492">
                <rect width="24" height="24" fill="white"/>
              </clipPath>
            </defs>
          </svg>
        </span>      </button>
      <div class="section-body" id="application-documents-section">Loading application documents...</div>
    </div>
  </div>
  

  <!-- NEW: Upsell container (shown when recordId present, transactionId missing) -->
  <div class="outer-card upsell-card" id="upsell-card" hidden>
    <div class="offer-grid">
      <div class="offer">
        <div class="offer-title">Need more details?</div>
        <div class="offer-desc">Get unit-specific information and detailed building data with our standard questionnaire.</div>
        <a class="btn btn-blue" id="btn-standard" href="#" role="button">Get standard questionnaire<span class="btn-price"> — $150</span><span class="btn-arrow">→</span></a>
      </div>
      <div class="offer">
        <div class="offer-title">Need something custom?</div>
        <div class="offer-desc">Get personalized responses in your preferred format with expert follow-ups.</div>
        <a class="btn btn-indigo" id="btn-custom" href="#" role="button">Get custom questionnaire<span class="btn-price"> — $450</span><span class="btn-arrow">→</span></a>
      </div>
    </div>
  </div>

  <!-- Detailed unit and building information (styled like basic card; visible when recordId & transactionId present) -->
  <div class="outer-card detailed-card" id="detailed-card" hidden>
    <div class="page-title">Detailed unit and building information</div>
    <div class="subtitle">Unlock comprehensive unit-specific and building data to speed up your application</div>

    <!-- Section: Unit Specific Information -->
    <div class="section">
      <button class="section-head" type="button" data-target="#unit-specific-info-section">
        <div class="head-left">
          <span class="head-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_unit_info)">
                <path d="M12 3L2 12H5V21H10V15H14V21H19V12H22L12 3Z" fill="currentColor"/>
              </g>
              <defs>
                <clipPath id="clip0_unit_info">
                  <rect width="24" height="24" fill="white"/>
                </clipPath>
              </defs>
            </svg>
          </span>
          <div>
            <div class="head-title">Unit Specific Information</div>
            <div class="head-caption">Common charges, assessments, shares</div>
          </div>
        </div>
        <span class="chevron" aria-hidden="true">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_672_14492)">
              <path d="M12 13.1719L16.95 8.22192L18.364 9.63592L12 15.9999L5.63599 9.63592L7.04999 8.22192L12 13.1719Z" fill="currentColor"/>
            </g>
            <defs>
              <clipPath id="clip0_672_14492">
                <rect width="24" height="24" fill="white"/>
              </clipPath>
            </defs>
          </svg>
        </span>      </button>
      <div class="section-body" id="unit-specific-info-section"></div>
    </div>

    <!-- Section: Building Information -->
    <div class="section">
      <button class="section-head" type="button" data-target="#building-info-section">
        <div class="head-left">
          <span class="head-icon">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <g clip-path="url(#clip0_bldg_info)">
                <path d="M3 21V3H13V7H21V21H3ZM11 19H13V17H11V19ZM7 19H9V17H7V19ZM11 15H13V13H11V15ZM7 15H9V13H7V15ZM11 11H13V9H11V11ZM7 11H9V9H7V11ZM15 19H19V9H15V19Z" fill="currentColor"/>
              </g>
              <defs>
                <clipPath id="clip0_bldg_info">
                  <rect width="24" height="24" fill="white"/>
                </clipPath>
              </defs>
            </svg>
          </span>
          <div>
            <div class="head-title">Building Information</div>
            <div class="head-caption">Floors, units, occupancy details</div>
          </div>
        </div>
        <span class="chevron" aria-hidden="true">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_672_14492)">
              <path d="M12 13.1719L16.95 8.22192L18.364 9.63592L12 15.9999L5.63599 9.63592L7.04999 8.22192L12 13.1719Z" fill="currentColor"/>
            </g>
            <defs>
              <clipPath id="clip0_672_14492">
                <rect width="24" height="24" fill="white"/>
              </clipPath>
            </defs>
          </svg>
        </span>
    </button>
      <div class="section-body" id="building-info-section"></div>
    </div>

    <!-- Footer purchase bar -->
    <div class="purchase-cta purchase-cta--detail">
      <button class="purchase-cta-btn purchase-cta-btn--sm" id="btn-standard" type="button">
        <span class="btn-label">Purchase here</span>
        <span class="btn-price" aria-hidden="true">$150</span>
        <span class="btn-arrow" aria-hidden="true">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_672_14440)">
              <path d="M16.172 10.9999L10.808 5.63592L12.222 4.22192L20 11.9999L12.222 19.7779L10.808 18.3639L16.172 12.9999H4V10.9999H16.172Z" fill="#1A1A1A"/>
            </g>
            <defs>
              <clipPath id="clip0_672_14440">
                <rect width="24" height="24" fill="white"/>
              </clipPath>
            </defs>
          </svg>
        </span>
      </button>
    </div>
  </div>
</div>

<style>
    
  :root{ 
    --border:#e5e7eb; 
    --bg:#f8fafc; 
    --fg:#1f2937; 
    --muted:#6b7280; 
    --brand:#006956; 
    --row-bg:#ffffff; 
    /* Daisy Brand Colors */
    --daisy-deep:#08494B;
    --daisy-green:#006956;
    --daisy-grass:#4C9D8D;
    --daisy-mint:#D3FFF3;
    --daisy-off:#FFFDF4;
    /* NEW: secondary palette for CTAs per guidelines */
    --daisy-blue:#4255FF;    /* Daisy Blue */
    --daisy-midnight:#1F2870;/* Midnight (deep indigo) */
  }
  body{ background:var(--bg); }
  .container{ max-width:960px; margin:auto; font-family:Inter,system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif; padding:40px 20px; color:var(--fg);} 
  .outer-card{ background:#fff; border:1px solid var(--border); padding:28px; box-shadow:0 4px 10px rgba(0,0,0,.04); border-radius:4px; position:relative; }
  .page-title{ font-family: 'Reckless', serif; font-size:32px; font-weight:600; text-align:center; margin:6px 0; color:var(--fg);}
  .subtitle{ font-family: 'Basis Grotesk', sans-serif; text-align:center; color:var(--muted); font-size:16px; margin-bottom:22px;}
  .paid-badge{ display:inline-flex; align-items:center; gap:6px; background:#E8F1FF; color:#1D4ED8; border:1px solid #BFDBFE; border-radius:9999px; padding:4px 8px; font-weight:800; font-size:12px; margin:8px auto 0; }
  .paid-icon{ display:inline-flex; align-items:center; justify-content:center; color:#1D4ED8; }
  .paid-text{ line-height:1; }
  
  /* Rate limit message styling */
  .rate-limit-message { background:#fef3c7; border:1px solid #f59e0b; border-radius:4px; padding:12px 16px; margin:16px 0; text-align:center; }
  .rate-limit-message .message-content { color:#92400e; font-size:14px; display:flex; align-items:center; justify-content:center; gap:8px; }
  .rate-limit-message span { font-size:16px; }

  /* Info card - subtle Daisy accent */
  .info-card{ background:linear-gradient(135deg,#f8fafc 0%,#f1f5f9 100%); border:1px solid var(--daisy-green); border-radius:4px; padding:16px 18px; margin-bottom:20px; color:var(--fg); }
  .card-title{ font-weight:700; font-size:16px; color:var(--daisy-deep); }
  .card-subtitle{ font-size:13px; color:var(--muted); margin-top:2px; }
  .info-card::after{ content:""; display:block; height:3px; margin-top:10px; border-radius:1px; background:linear-gradient(90deg,var(--daisy-green),var(--daisy-grass)); }

  .section{ border:1px solid var(--border); border-radius:4px; margin:16px 0; overflow:hidden; background:#fff;}
  .section + .section{ margin-top:18px; }
  .section-head{ width:100%; display:flex; align-items:center; justify-content:space-between; background:#f8fafc; border:0; padding:14px 16px; cursor:pointer; font:inherit; text-align:left; color:var(--fg); }
  .section-head:hover{ background:#f1f5f9; }
  .head-left{ display:flex; gap:12px; align-items:center;}
  /* Default (Basic card) icons: Daisy green */
  .head-icon{ width:28px; height:28px; display:inline-grid; place-items:center; background:var(--daisy-green); color:#fff; border-radius:4px; font-weight:400; }
  /* Paid (Detailed card) icons: Sky blue */
  .detailed-card .head-icon{ background:#C5E9FF; color:#1A1A1A; border:1px solid #9ED6FF; }
  .head-icon svg{ width:20px; height:20px; }
  .head-title{ font-weight:400; font-size:16px; }
  .head-caption{ font-size:12px; color:var(--muted); margin-top:2px; letter-spacing:0.05em; }
  .chevron{ display:inline-flex; align-items:center; justify-content:center; width:24px; height:24px; transition:transform .25s ease; color:var(--muted); }
  .chevron svg{ width:24px; height:24px; display:block; }
  .section.open .chevron{ transform: rotate(-180deg); }

  .section-body{ display:none; padding:14px; background:#fff; }
  .section.open .section-body{ display:block; }

  .section-body h4{ font-size:12px; letter-spacing:.05em; color:var(--muted); margin:14px 4px 8px; font-weight:400; }

  .data-row{ display:flex; align-items:center; justify-content:space-between; gap:16px; padding:14px 16px; background:var(--row-bg); border:1px solid var(--border); border-radius:4px; margin:8px 0; }
  .label{ font-weight:400; flex:0 0 280px; color:var(--muted); font-size:12px; letter-spacing:0.05em; display:flex; align-items:center; }
  .value{ font-weight:400; color:var(--fg); white-space:normal; word-break:break-word; display:flex; flex-direction:column; align-items:flex-end; justify-content:center; gap:6px; width:100%; max-width:400px; }
  
  /* Unit breakdown section styling */
  .section-body h4 {
    font-size: 12px;
    letter-spacing: 0.05em;
    color: var(--muted);
    margin: 14px 4px 8px;
    font-weight: 400;
    text-transform: uppercase;
  }
  
  /* 4-column grid layout for unit breakdown */
  .unit-breakdown-4col {
    display: grid !important;
    grid-template-columns: repeat(4, 1fr) !important;
    gap: 20px !important;
    width: 100% !important;
    max-width: none !important;
    align-items: flex-start !important;
    justify-content: flex-start !important;
  }
  
  /* Remove left margin since there's no label */
  .unit-breakdown-grid .value {
    margin-left: 0 !important;
    padding-left: 0 !important;
  }
  
  .grid-col {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  
  .grid-item {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  
  .grid-label {
    font-size: 11px !important;
    color: var(--muted) !important;
    font-weight: 500 !important;
    line-height: 1.2;
    letter-spacing: 0.05em;
    text-align: left;
  }
  
  .grid-value {
    color: var(--fg) !important;
    text-align: left;
  }
  
  /* Responsive grid for smaller screens */
  @media (max-width: 768px) {
    .unit-breakdown-4col {
      grid-template-columns: repeat(2, 1fr) !important;
      gap: 16px !important;
    }
  }
  
  @media (max-width: 480px) {
    .unit-breakdown-4col {
      grid-template-columns: 1fr !important;
      gap: 12px !important;
    }
  }
  .value a{ color:var(--daisy-blue); text-decoration:none; }
  .value a:hover{ text-decoration:underline; }
  .data-row:hover{ background:#f8fafc; }
  
  /* Building Policies typography tweaks: unify sizes, soften answers */
  /* Unify text size and soften dynamic values across all sections */
  #building-policies-section .label,
  #application-documents-section .label,
  #fee-policies-section .label,
  #fees-section .label{ font-size:13px; }
  #building-policies-section .value,
  #application-documents-section .value,
  #fee-policies-section .value,
  #fees-section .value{ font-size:13px; color:#374151; }

  /* CHIP/TAG styles for Utilities and HVAC */
  .pills{ display:flex; flex-wrap:wrap; gap:6px; justify-content:flex-end; }
  .pill{ display:inline-flex; align-items:center; padding:4px 8px; border-radius:4px; font-size:12px; line-height:1; font-weight:700; border:1px solid var(--border); background:#f8fafc; color:var(--fg); }
  .pill:nth-child(7n+1){ background:#e8f5e8; border-color:#9be6a3; color:#166534; }
  .pill:nth-child(7n+2){ background:#f0f9ff; border-color:#7dd3fc; color:#0369a1; }
  .pill:nth-child(7n+3){ background:#fef3c7; border-color:#fcd34d; color:#92400e; }
  .pill:nth-child(7n+4){ background:#fce7f3; border-color:#f9a8d4; color:#be185d; }
  .pill:nth-child(7n+5){ background:#f3e8ff; border-color:#c4b5fd; color:#7c3aed; }
  .pill:nth-child(7n+6){ background:#ecfdf5; border-color:#86efac; color:#166534; }
  .pill:nth-child(7n+7){ background:#fff7ed; border-color:#fed7aa; color:#ea580c; }
  
  /* File/Link chip style */
  .stack-links{ display:flex; flex-wrap:wrap; gap:6px; justify-content:flex-end; align-items:center; }
  a.file-link{ display:inline-flex; align-items:center; gap:6px; padding:4px 8px; border-radius:6px; background:#EEF4FF; border:1px solid #C7D2FE; color:#2563EB; text-decoration:none; font-weight:400; font-size:12px; line-height:1; }
  a.file-link:hover{ background:#E6EEFF; border-color:#B7C8FF; color:#1D4ED8; text-decoration:underline; }
  a.file-link svg{ width:16px; height:16px; display:block; }
  
  /* Portal link style - no box, no underline, smaller than file links */
  a.portal-link{ display:inline-flex; align-items:center; gap:6px; color:#2563EB; text-decoration:none; font-weight:400; font-size:12px; }
  a.portal-link:hover{ text-decoration:none; }
  a.portal-link svg{ width:16px; height:16px; display:block; }

  /* NEW: Upsell offers */
  .upsell-card{ margin-top:24px; }
  .offer-grid{ display:grid; grid-template-columns:1fr; gap:18px; }
  @media (min-width:720px){ .offer-grid{ grid-template-columns:1fr 1fr; } }
  .offer{ border:1px solid var(--border); border-radius:4px; padding:18px; text-align:center; background:#fff; box-shadow:0 4px 10px rgba(0,0,0,.04); }
  .offer-title{ font-weight:800; font-size:18px; color:var(--fg); margin-bottom:6px; }
  .offer-desc{ color:var(--muted); font-size:13px; margin-bottom:12px; }
  .btn{ display:inline-block; padding:10px 14px; border-radius:4px; font-weight:700; text-decoration:none; color:#fff; border:1px solid transparent; }
  .btn-blue{ background:var(--daisy-blue); }
  .btn-indigo{ background:var(--daisy-midnight); }
  .btn:hover{ filter:brightness(.92); color:#fff; }
  
  /* Center buttons and add hover effects like purchase button */
  .offer .btn{ 
    display:inline-flex; 
    align-items:center; 
    justify-content:center; 
    margin:0 auto; 
    width:fit-content; 
    min-width:200px;
    border-radius:4px;
    transition: filter .15s ease;
  }
  
  /* Hide prices by default, show on hover (same as purchase button) */
  .btn .btn-price{ opacity:0; width:0; margin-left:0; overflow:hidden; white-space:nowrap; transition:opacity .15s ease, width .15s ease, margin .15s ease; }
  .btn:hover .btn-price{ opacity:1; width:auto; margin-left:4px; }
  
  /* Hide arrows by default, show on hover (same as purchase button) */
  .btn .btn-arrow{ opacity:0; width:0; margin-left:0; overflow:hidden; white-space:nowrap; transition:opacity .15s ease, width .15s ease, margin .15s ease; }
  .btn:hover .btn-arrow{ opacity:1; width:auto; margin-left:4px; }

  /* Special styling for utilities and HVAC containers */
  .data-row.utility-hvac-row { background:var(--daisy-mint); border:1px solid var(--daisy-grass); border-radius:4px; }
  .data-row.utility-hvac-row:hover { background:var(--daisy-off); }
  .data-row.utility-hvac-row .label{ color:var(--daisy-deep); }
  .data-row.utility-hvac-row .value{ color:var(--daisy-deep); }

  /* Clamp */
  .value .clamp-wrap{ text-align:left; align-items:flex-start; }
  .value .clamp-text{ text-align:left; }
  .value:not(:has(.clamp-wrap)){ text-align:right; }
  .clamp-wrap{ max-width:100%; }
  .clamp-text{ display:-webkit-box; -webkit-line-clamp:3; -webkit-box-orient:vertical; overflow:hidden; transition:all .3s ease; max-height:4.5em; line-height:1.5em; }
  .clamp-wrap[data-expanded="true"] .clamp-text{ display:block; -webkit-line-clamp:unset; max-height:none; }
  .toggle{ margin-top:8px; padding:4px 10px; border:1px solid transparent; background:transparent; color:#6B7280; font:inherit; font-weight:800; cursor:pointer; border-radius:8px; font-size:14px; line-height:1; transition:background-color .15s ease, border-color .15s ease, color .15s ease, box-shadow .15s ease; display:inline-flex; align-items:center; justify-content:center; }
  .toggle:hover{ background:#d1d5db; border-color:#9ca3af; color:#111827; box-shadow:0 1px 2px rgba(0,0,0,0.08); }
  .toggle:focus{ outline:none; box-shadow:0 0 0 3px rgba(59,130,246,0.2); }
  .toggle{ display:none; }
  .clamp-wrap[data-overflow="true"] .toggle{ display:inline-block !important; }
  .clamp-wrap[data-expanded="true"] .toggle{ display:none !important; }

  /* Detailed card follows same styling as basic; only spacing needed */
  .detailed-card { margin-top: 32px; }
  
  /* Make detailed container text match basic container exactly */
  .detailed-card .label {
    font-weight: 400 !important;
    color: var(--muted) !important;
    font-size: 12px !important;
    letter-spacing: 0.05em !important;
  }
  
  .detailed-card .value {
    font-weight: 400 !important;
    color: var(--fg) !important;
    font-size: 14px !important;
  }
  .purchase-cta--detail{ margin-top:16px; display:flex; justify-content:center; align-items:center; }
  .purchase-cta-btn--sm{ 
    max-width:none;
    width: fit-content; 
    background:#85FF5B; 
    border-color:#6ee75a; 
    color:#1A1A1A; 
    font-weight:400; 
    font-family:"Basis Grotesque", Inter, system-ui, -apple-system, "Segoe UI", Roboto, Arial, sans-serif;
    font-size:14px;
    padding:10px 16px; 
    border-radius:4px; 
    display:inline-flex; 
    align-items:center; 
    justify-content:center; 
    gap:0; 
  }
  .purchase-cta-btn--sm:hover{ filter:brightness(.95); gap:8px; }
  .purchase-cta-btn--sm .btn-price{ opacity:0; width:0; margin-left:0; overflow:hidden; white-space:nowrap; transition:opacity .15s ease, width .15s ease, margin .15s ease; }
  .purchase-cta-btn--sm:hover .btn-price{ opacity:0.95; width:auto; margin-left:4px; }
  .purchase-cta-btn--sm .btn-arrow{ opacity:0; width:0; height:18px; margin-left:0; overflow:hidden; transition:opacity .15s ease, width .15s ease, margin .15s ease; display:inline-flex; align-items:center; }
  .purchase-cta-btn--sm:hover .btn-arrow{ opacity:1; width:18px; margin-left:6px; }

  /* Blurred hidden value pill */
  .hidden-pill{ 
    display:inline-block; padding:4px 10px; border-radius:12px; 
    background:linear-gradient(180deg,#f4f6f9,#eef2f7); 
    color:transparent; 
    font-weight:600; font-size:12px; position:relative; 
    filter:blur(3px); 
  }
  .hidden-pill::after{ 
    content:"Hidden"; color:#9aa5b1; position:absolute; inset:0; 
    display:flex; align-items:center; justify-content:center; 
    font-weight:600; text-shadow:0 0 8px rgba(154,165,177,0.6);
  }
  
  /* Print icon styling */
  .print-icon {
    position: absolute;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    padding: 8px;
    cursor: pointer;
    border-radius: 6px;
    transition: background-color 0.2s ease;
    z-index: 10;
  }
  
  .print-icon:hover {
    background-color: #f1f5f9;
  }
  
  .print-icon svg {
    width: 24px;
    height: 24px;
    display: block;
    fill: #E5E7EB;
  }

  /* Print */
  @media print {
    .print-controls,.section-head,.toggle{ display:none !important; }
    .application-docs{ display:block !important; }
    .section-body{ display:block !important; }
    .toggle,button.toggle,.clamp-wrap .toggle,[class*="toggle"]{ display:none !important; visibility:hidden !important; opacity:0 !important; position:absolute !important; left:-9999px !important; }
    .clamp-wrap[data-expanded="false"] .clamp-text,.clamp-wrap .clamp-text{ display:block !important; -webkit-line-clamp:unset !important; max-height:none !important; overflow:visible !important; height:auto !important; -webkit-box-orient:unset !important; }
    .clamp-text{ display:block !important; -webkit-line-clamp:unset !important; max-height:none !important; overflow:visible !important; -webkit-box-orient:unset !important; height:auto !important; }
    .clamp-wrap[data-expanded="true"] .clamp-text,.clamp-wrap .clamp-text{ background:transparent !important; padding:0 !important; border-left:none !important; border:none !important; }
    .outer-card{ box-shadow:none !important; border:1px solid #ccc !important; }
    body{ background:#fff !important; color:#000 !important; }
    .outer-card{ background:#fff !important; }
    .section{ border:1px solid #ccc !important; background:#fff !important; margin:10px 0 !important; page-break-inside:avoid; }
    .section-head{ background:#f5f5f5 !important; color:#000 !important; }
    .data-row{ border:1px solid #ddd !important; background:#fff !important; page-break-inside:avoid; }
    .section:not(:last-child){ page-break-after:auto; }
    .page-title,.subtitle,.section-head{ page-break-after:avoid; }
    
    /* Hide questionnaire offer cards in print */
    .upsell-card{ display:none !important; }
    
    /* Ensure all links are clickable and visible in print, but hide all icons */
    a.file-link, a.portal-link, a[href]{ 
      color:#000 !important; 
      text-decoration:underline !important; 
      background:transparent !important; 
      border:none !important; 
      padding:0 !important; 
      display:inline !important; 
    }
    a.file-link svg, a.portal-link svg, svg{ 
      display:none !important; 
    }
    .stack-links{ 
      display:block !important; 
      margin:4px 0 !important; 
    }
  }

  /* Loading Overlay */
  .loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 0.95);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    backdrop-filter: blur(4px);
  }

  .loading-content {
    text-align: center;
    background: white;
    padding: 40px;
    border-radius: 12px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
  }

  .loading-spinner {
    width: 48px;
    height: 48px;
    border: 4px solid #f3f4f6;
    border-top: 4px solid var(--daisy-green);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 20px;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .loading-text {
    font-size: 18px;
    color: var(--fg);
    font-weight: 500;
  }

  /* Error Message */
  .error-message {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 40px;
    border-radius: 12px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    border: 1px solid #ef4444;
    z-index: 9999;
    max-width: 400px;
    text-align: center;
  }

  .error-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 16px;
  }

  .error-icon {
    font-size: 32px;
  }

  .error-text {
    font-size: 16px;
    color: var(--fg);
    line-height: 1.5;
  }

  .error-retry-btn {
    background: var(--daisy-green);
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .error-retry-btn:hover {
    background: var(--daisy-deep);
  }
</style>

<script>
(()=>{ 'use strict';

(function attachWhenSoftrReady(){
  const run = () => requestAnimationFrame(init);
  document.addEventListener('spr:rendered', run, { once:true });
  document.addEventListener('DOMContentLoaded', run, { once:true });
  setTimeout(()=>{ if(!window.__blkReady) run(); }, 300);
})();

function init(){
  if(window.__blkReady) return;
  const root = document.querySelector('.outer-card');
  if(!root){ requestAnimationFrame(init); return; }
  window.__blkReady = true;

  // Hide loading state initially (will be shown again when fetchData is called)
  hideLoadingState();
  hideErrorState();

  document.querySelectorAll('.section-head').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      const section = btn.closest('.section');
      section.classList.toggle('open');
    });
  });
  document.querySelector('.section')?.classList.add('open');

  // NEW: decide what to show based on presence of recordId / transactionId / buildingId
  try {
    const qs = new URLSearchParams(window.location.search);
    const hasRecordId = !!(qs.get('recordId') || '').trim();
    const hasTxnId = !!(qs.get('transactionId') || '').trim();
    const hasBuildingId = !!(qs.get('buildingId') || '').trim();

    const detailedEl = document.getElementById('detailed-card');
    const upsellEl = document.getElementById('upsell-card');

    if (hasRecordId && !hasTxnId) {
      // Show upsell, hide detailed (and specifically hide if buildingId present, per requirement)
      upsellEl && upsellEl.removeAttribute('hidden');
      if (detailedEl) {
        if (detailedEl.parentNode) detailedEl.parentNode.removeChild(detailedEl);
        else detailedEl.setAttribute('hidden','');
      }
    } else if (hasRecordId && hasTxnId) {
      // Show detailed card
      detailedEl && detailedEl.removeAttribute('hidden');
      upsellEl && upsellEl.setAttribute('hidden','');
      // After paint, scroll directly to the purchase button and center it lower in viewport
      requestAnimationFrame(()=>{
        try {
          const target = detailedEl.querySelector('#btn-standard') || detailedEl.querySelector('.purchase-cta--detail') || detailedEl;
          const rect = target.getBoundingClientRect();
          const y = rect.top + window.pageYOffset - (window.innerHeight * 0.6 - rect.height/2);
          window.scrollTo({ top: y, behavior: 'smooth' });
        } catch {
          detailedEl && detailedEl.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      });
    } else {
      // No recordId at all: remove detailed & upsell
      detailedEl && detailedEl.parentNode && detailedEl.parentNode.removeChild(detailedEl);
      upsellEl && upsellEl.parentNode && upsellEl.parentNode.removeChild(upsellEl);
    }
  } catch {}

  // Clamp toggle
  document.addEventListener('click', (e)=>{
    // Expand/collapse when clicking the ellipsis or anywhere in the value's clamp area
    const toggleBtn = e.target.closest('.toggle');
    const clampArea = e.target.closest('.clamp-wrap');
    if (!toggleBtn && !clampArea) return;
    const wrap = clampArea || toggleBtn.closest('.clamp-wrap');
    if (!wrap) return;
    const expanded = wrap.getAttribute('data-expanded') === 'true';
    wrap.setAttribute('data-expanded', String(!expanded));
    const btn = wrap.querySelector('.toggle');
    if (btn) {
      btn.textContent = expanded ? '…' : '…';
    btn.setAttribute('aria-expanded', String(!expanded));
    }
  });

  // Print behavior
  window.addEventListener('beforeprint', () => {
    document.querySelectorAll('.section').forEach(s => s.classList.add('open'));
    document.querySelectorAll('.clamp-wrap').forEach(w => w.setAttribute('data-expanded','true'));
    document.querySelectorAll('.toggle').forEach(t => {
      t.style.display='none'; t.style.visibility='hidden'; t.style.opacity='0'; t.style.position='absolute'; t.style.left='-9999px';
    });
  });
  window.addEventListener('afterprint', () => {
    document.querySelectorAll('.toggle').forEach(t => { t.style.display=''; t.style.visibility=''; t.style.opacity=''; t.style.position=''; t.style.left=''; });
    document.querySelectorAll('.clamp-wrap').forEach(w => w.setAttribute('data-expanded','false'));
    document.querySelectorAll('.section').forEach((s,i)=> i===0 ? s.classList.add('open') : s.classList.remove('open'));
  });

  // Attach transactionId generator to standard/custom questionnaire buttons
  const attachTxn = (id)=>{
    const el = document.getElementById(id);
    if(!el) return;
    el.addEventListener('click', (e)=>{
      e.preventDefault();
      const url = new URL(window.location.href);
      // Generate a pseudo-unique transactionId: timestamp + random + short hash of path
      const rand = Math.random().toString(36).slice(2, 10);
      const pathHash = Array.from(url.pathname).reduce((h,c)=>((h<<5)-h + c.charCodeAt(0))|0,0).toString(36).replace(/-/g,'x');
      const txn = `${Date.now()}-${rand}${pathHash.slice(0,4)}`;
      url.searchParams.set('transactionId', txn);
      window.location.assign(url.toString());
    });
  };
  attachTxn('btn-standard');
  attachTxn('btn-custom');

  fetchData().catch(console.error);
  
  // Only refresh data on actual navigation changes, not just page refreshes
  let lastUrl = window.location.href;
  window.addEventListener('popstate', () => { 
    const currentUrl = window.location.href;
    if (currentUrl !== lastUrl) {
      console.log('🔄 URL changed, refreshing data');
      lastUrl = currentUrl;
      fetchData().catch(console.error);
    }
  });
  
  // Check for URL changes on pageshow (but be smart about it)
  window.addEventListener('pageshow', (event) => {
    const currentUrl = window.location.href;
    if (currentUrl !== lastUrl) {
      console.log('🔄 URL changed on pageshow, refreshing data');
      lastUrl = currentUrl;
  fetchData().catch(console.error);
    } else {
      console.log('📋 Same URL on pageshow, using cached data');
    }
  });
}

async function fetchData(){
  const qs = new URLSearchParams(window.location.search);
  const buildingId = qs.get('buildingId');
  if(!buildingId) return;

  // UPDATED: only auto-generate transactionId when it's missing AND we are NOT in the (recordId + buildingId) path
  let finalTransactionId = qs.get('transactionId');
  try {
    const url = new URL(window.location.href);
    const hasTxn = !!url.searchParams.get('transactionId');
    const hasRecord = !!(url.searchParams.get('recordId') || '').trim();
    const hasBuilding = !!(url.searchParams.get('buildingId') || '').trim();
    if (!hasTxn && !(hasRecord && hasBuilding)) {
      const generated = `${Date.now()}-${Math.random().toString(36).slice(2,10)}`;
      url.searchParams.set('transactionId', generated);
      window.history.replaceState({}, '', url.toString());
      // Update our local variable to match the new URL
      finalTransactionId = generated;
    }
  } catch {}

  // Show loading state immediately
  showLoadingState();
  
  // SMART CACHING: Hybrid approach - basic info cached, detailed info requires webhook check
  const cacheKey = `${buildingId}-${qs.get('recordId') || 'no-record'}-${finalTransactionId || 'no-txn'}`;
  
  // Also create a fallback key for when transactionId is missing but we have building/record
  const fallbackCacheKey = finalTransactionId === 'no-txn' ? 
    `${buildingId}-${qs.get('recordId') || 'no-record'}-*` : null;
  
  // Load cached data from localStorage
  let cachedData;
  let needsWebhookForDetailed = false;
  
  try {
    const storedCache = localStorage.getItem('buildingDataCache');
    console.log('🔍 Cache lookup for key:', cacheKey);
    if (storedCache) {
      const parsedCache = JSON.parse(storedCache);
      cachedData = parsedCache[cacheKey];
      console.log('📦 Stored cache keys:', Object.keys(parsedCache));
      console.log('📦 Raw stored cache:', storedCache.substring(0, 200) + '...');
      
      if (cachedData) {
        console.log('✅ Cache hit! Found data for:', cacheKey);
        console.log('📊 Cached data keys:', Object.keys(cachedData));
      } else {
        console.log('❌ Cache miss! No data for:', cacheKey);
        // Check if there are similar keys for basic building info
        const similarKeys = Object.keys(parsedCache).filter(key => 
          key.includes(buildingId) && key.includes(qs.get('recordId') || 'no-record')
        );
        
        if (similarKeys.length > 0) {
          console.log('🔍 Similar keys found for basic info:', similarKeys);
          // Use the most recent cached data for basic building info
          const mostRecentKey = similarKeys.sort().pop();
          const basicCachedData = parsedCache[mostRecentKey];
          
          // Extract only basic building info (fees, policies, etc.)
          cachedData = {
            fees: basicCachedData.fees,
            feePolicies: basicCachedData.feePolicies,
            buildingPolicies: basicCachedData.buildingPolicies,
            // Don't include detailed unit info from old cache
            // This will force a webhook call to check if new transactionId is paid
          };
          
          console.log('🔄 Using cached basic building info from:', mostRecentKey);
          console.log('⚠️ Will call webhook to check if new transactionId is paid for detailed info');
          
          // Mark that we need webhook for detailed info
          needsWebhookForDetailed = true;
          
          // Update the current URL to match the cached key's transactionId for basic info
          try {
            const url = new URL(window.location.href);
            const keyParts = mostRecentKey.split('-');
            if (keyParts.length >= 3) {
              const cachedTransactionId = keyParts.slice(2).join('-');
              if (cachedTransactionId && cachedTransactionId !== 'no-txn') {
                // Store the cached transactionId for basic info
                const basicInfoTransactionId = cachedTransactionId;
                console.log('🔄 Basic info will use cached transactionId:', basicInfoTransactionId);
              }
            }
          } catch (urlError) {
            console.warn('Failed to process cached transactionId:', urlError);
          }
        }
      }
    } else {
      console.log('📦 No stored cache found in localStorage');
    }
  } catch (error) {
    console.warn('Failed to load cache from localStorage:', error);
  }
  
  let data;
  if (cachedData && !needsWebhookForDetailed) {
    console.log('📋 Using fully cached data for:', cacheKey);
    data = cachedData;
    hideLoadingState();
  } else {
    // We need webhook data - either no cache or need to check if new transactionId is paid
    if (needsWebhookForDetailed) {
      console.log('🔄 Need webhook to check if new transactionId is paid for detailed info');
    }
    
    // Check if we're still rate limited before attempting webhook
    if (circuitBreakerOpen) {
      const timeSinceOpen = Date.now() - circuitBreakerOpenedAt;
      if (timeSinceOpen < CIRCUIT_BREAKER_TIMEOUT) {
        console.log('🚫 Circuit breaker still open, showing error state');
        showErrorState('Rate limited. Please try again later.');
        return;
      } else {
        console.log('🔄 Circuit breaker timeout expired, attempting webhook');
        circuitBreakerOpen = false;
        consecutiveFailures = 0;
      }
    }
    
    console.log('🔄 Calling webhook for:', cacheKey);
    try {
      data = await webhook(buildingId, finalTransactionId, qs.get('recordId'));
      
      if (data) {
        // If we have cached basic info, merge it with new webhook data
        if (needsWebhookForDetailed && cachedData) {
          console.log('🔄 Merging cached basic info with new webhook data');
          data = {
            ...cachedData,  // Keep cached basic info
            ...data          // Override/add detailed info from webhook
          };
        }
        
        // Cache successful response in localStorage
        try {
          const existingCache = localStorage.getItem('buildingDataCache');
          const cache = existingCache ? JSON.parse(existingCache) : {};
          cache[cacheKey] = data;
          localStorage.setItem('buildingDataCache', JSON.stringify(cache));
          console.log('💾 Cached merged data in localStorage for:', cacheKey);
          console.log('📊 Total cached entries:', Object.keys(cache).length);
        } catch (cacheError) {
          console.warn('Failed to cache data:', cacheError);
        }
      } else {
        console.log('📋 Webhook returned no data');
        if (needsWebhookForDetailed && cachedData) {
          console.log('🔄 Webhook failed but have cached basic info, showing basic info only');
          data = cachedData;
        } else {
          showErrorState('No data available. Please try again later.');
          return;
        }
      }
    } catch (error) {
      console.warn('Webhook failed:', error.message);
      if (needsWebhookForDetailed && cachedData) {
        console.log('🔄 Webhook failed but have cached basic info, showing basic info only');
        data = cachedData;
      } else {
        if (error.message.includes('429') || error.message.includes('Too Many Requests')) {
          showErrorState('Rate limited. Please try again later.');
        } else {
          showErrorState('Failed to load data. Please try again later.');
        }
        return;
      }
    }
  }
  
  const normalized = Array.isArray(data) ? (data[0] || {}) : data;
  hideLoadingState();
  
  // Log what data we're rendering
  if (needsWebhookForDetailed && cachedData) {
    console.log('🎯 Rendering HYBRID data:');
    console.log('   - Basic info: From cache (fees, policies, etc.)');
    console.log('   - Detailed info: From webhook (unit data, if paid)');
  } else if (cachedData) {
    console.log('🎯 Rendering FULLY CACHED data');
  } else {
    console.log('🎯 Rendering FRESH webhook data');
  }
  
  render(normalized);
}

// Loading state management
function showLoadingState() {
  const loadingEl = document.getElementById('loading-overlay');
  if (loadingEl) {
    loadingEl.style.display = 'flex';
  }
}

function hideLoadingState() {
  const loadingEl = document.getElementById('loading-overlay');
  if (loadingEl) {
    loadingEl.style.display = 'none';
  }
}

function showErrorState(message) {
  hideLoadingState();
  const errorEl = document.getElementById('error-message');
  if (errorEl) {
    errorEl.textContent = message;
    errorEl.style.display = 'block';
  }
}

function hideErrorState() {
  const errorEl = document.getElementById('error-message');
  if (errorEl) {
    errorEl.style.display = 'none';
  }
}

function showRateLimitMessage() {
  const messageEl = document.createElement('div');
  messageEl.className = 'rate-limit-message';
  messageEl.innerHTML = `
    <div class="message-content">
      <span>⚠️</span> 
      <strong>Rate Limited:</strong> The data service is temporarily busy. 
      Please try again in a few minutes.
    </div>`;
  const titleEl = document.querySelector('.page-title');
  if (titleEl && titleEl.parentNode) titleEl.parentNode.insertBefore(messageEl, titleEl.nextSibling);
  setTimeout(() => { messageEl.parentNode && messageEl.parentNode.removeChild(messageEl); }, 10000);
}

function getFallbackData(buildingId) {
  return {
    fees: {
      sales: {
        'Sale building application fee': '500',
        'Sale move in fee': '250',
        'Sale move out fee': '150',
        'Sale move in deposit': '1000',
        'Sale move out deposit': '500'
      },
      leases: {
        'Lease building application fee': '75',
        'Lease move in fee': '200',
        'Lease move out fee': '100',
        'Lease move in deposit': '2000'
      },
      alterations: { 'Alteration sec deposit (%)': '10' }
    },
    feePolicies: { 'Flip Tax': '2% of sale price', 'Sublet Fee': '500', 'Capital Contribution': '1000' },
    buildingPolicies: {
      'LLCs allowed': 'Yes','Pied a terre': 'Yes','Trusts allowed': 'Yes','Gifting allowed?': 'Yes','Co-purchasing': 'Yes',
      'Fee simple': 'Yes','Right of First Refusal': 'Yes','Utilities included': 'Water, Sewage, Electric, Gas','HVAC': 'Central Air, Heat',
      'Sublet policy?': 'Sublets allowed with board approval and 500 fee',
      'Pet Policy': 'Dogs and cats allowed with board approval. Maximum 2 pets per unit. Breed restrictions apply. Pet deposit required.'
    }
  };
}

// --- Robust JSON extraction ---
function extractJsonFromRaw(raw){
  let txt = raw.replace(/^\)\]\}'\n?/, '').replace(/^[^\[{]*?(?=[\[{])/, '');
  try { return JSON.parse(txt); } catch {}
  const openIdx = txt.search(/[\[{]/);
  if(openIdx === -1) throw new Error('No JSON braces in response');
  const openCh = txt[openIdx]; const closeCh = openCh === '{' ? '}' : ']';
  let depth = 0, inStr = false, esc = false, endIdx = -1;
  for(let i=openIdx;i<txt.length;i++){
    const c = txt[i];
    if(inStr){ if(esc){ esc=false; continue; } if(c==='\\'){ esc=true; } else if(c==='"'){ inStr=false; } continue; }
    if(c==='"'){ inStr=true; continue; }
    if(c===openCh) depth++; else if(c===closeCh){ depth--; if(depth===0){ endIdx=i; break; } }
  }
  if(endIdx!==-1){
    const slice = txt.slice(openIdx, endIdx+1);
    try { return JSON.parse(slice); } catch {}
    const repaired = slice.replace(/,\s*(?=[}\]])/g,'');
    return JSON.parse(repaired);
  }
  throw new Error('Could not balance JSON braces');
}

// Webhook call tracking to prevent multiple simultaneous calls
let webhookInProgress = false;
let lastWebhookCall = 0;
const WEBHOOK_COOLDOWN = 10000; // 10 seconds between calls (more aggressive)
let webhookCallCount = 0;
let consecutiveFailures = 0;
const MAX_CONSECUTIVE_FAILURES = 2; // Stop trying after 2 consecutive failures
let circuitBreakerOpen = false;
const CIRCUIT_BREAKER_TIMEOUT = 300000; // 5 minutes
let circuitBreakerOpenedAt = 0;

async function webhook(buildingId, transactionId, recordId){
  // Prevent multiple simultaneous webhook calls
  if (webhookInProgress) {
    console.log('🚫 Webhook already in progress, skipping duplicate call');
    return null;
  }
  
  // Circuit breaker - if we're getting consistent failures, stop all calls
  if (circuitBreakerOpen) {
    const timeSinceOpen = now - circuitBreakerOpenedAt;
    if (timeSinceOpen < CIRCUIT_BREAKER_TIMEOUT) {
      const remaining = CIRCUIT_BREAKER_TIMEOUT - timeSinceOpen;
      console.log(`🚫 Circuit breaker open (${Math.round(remaining/1000)}s remaining), all webhook calls blocked`);
      return null;
    } else {
      // Circuit breaker timeout expired, try to close it
      console.log('🔄 Circuit breaker timeout expired, attempting to close...');
      circuitBreakerOpen = false;
      consecutiveFailures = 0;
    }
  }
  
  // If we're in a failure state, be more conservative
  if (consecutiveFailures >= MAX_CONSECUTIVE_FAILURES) {
    console.log(`🚫 In failure state (${consecutiveFailures} consecutive failures), webhook temporarily disabled`);
    return null;
  }
  
  // Rate limiting - enforce cooldown between calls
  const now = Date.now();
  if (now - lastWebhookCall < WEBHOOK_COOLDOWN) {
    console.log(`⏳ Webhook cooldown active (${WEBHOOK_COOLDOWN - (now - lastWebhookCall)}ms remaining), skipping call`);
    return null;
  }
  
  // If we've had too many consecutive failures, extend the cooldown
  if (consecutiveFailures >= MAX_CONSECUTIVE_FAILURES) {
    const extendedCooldown = WEBHOOK_COOLDOWN * Math.pow(2, consecutiveFailures - MAX_CONSECUTIVE_FAILURES + 1);
    if (now - lastWebhookCall < extendedCooldown) {
      console.log(`🚫 Too many consecutive failures (${consecutiveFailures}), extended cooldown active (${extendedCooldown - (now - lastWebhookCall)}ms remaining)`);
      return null;
    }
  }
  
  webhookInProgress = true;
  webhookCallCount++;
  lastWebhookCall = now;
  
  console.log(`🔄 Webhook call #${webhookCallCount} starting at ${new Date().toISOString()}`);
  console.log(`📤 Payload:`, { buildingId, transactionId, recordId });
  
  const refreshId = `${Date.now()}-${Math.random().toString(36).slice(2,10)}`;
  const payload = {
    buildingId,
    transactionId,
    recordId,
    refreshId // ensure Make.com receives a unique event on each call
  };
  
  try {
    const attempt = async () => {
      const res = await fetch(`https://hook.us1.make.com/uaahksz3fcajpj1eixp9unaxnkkumhr7?rid=${encodeURIComponent(refreshId)}` ,{
        method:'POST',
        cache:'no-store',
        keepalive:true,
        redirect:'follow',
        headers:{
          'Content-Type':'application/json',
          'Accept':'application/json, text/plain, */*',
          'Cache-Control':'no-cache, no-store, must-revalidate',
          'Pragma':'no-cache'
        },
        body:JSON.stringify(payload)
      });
    const raw = await res.text();
      return { res, raw };
    };
    
    const delays = [0, 800, 1500, 3000, 5000];
    for (let i=0;i<delays.length;i++){
      if (delays[i]) {
        console.log(`⏰ Retry attempt ${i+1}/${delays.length} in ${delays[i]}ms...`);
        await new Promise(r=>setTimeout(r, delays[i]));
      }
      
      try {
        console.log(`🔄 Attempt ${i+1}: Calling webhook...`);
        const { res, raw } = await attempt();
        
    if (res.status === 429) {
          console.log(`🚫 Rate limited (429), attempt ${i+1} failed`);
          consecutiveFailures++;
          
          // Open circuit breaker on rate limiting
          if (!circuitBreakerOpen) {
            circuitBreakerOpen = true;
            circuitBreakerOpenedAt = now;
            console.log('🚫 Circuit breaker opened due to rate limiting');
          }
          
          throw new Error('429 Too Many Requests: Rate limit exceeded. Please try again later.');
        }
        
        const isAccepted = res.status === 202 || /^\s*Accepted\s*$/i.test(raw);
        const isEmpty = !raw.trim();
        
        if (isAccepted || isEmpty){
          if (i < delays.length - 1) {
            console.log(`⚠️ Got ${res.status} or empty response, retrying...`);
            continue; // try again
          }
          throw new Error('Backend returned 202 Accepted without JSON. The webhook needs to return data.');
        }
        
        console.log(`✅ Webhook successful on attempt ${i+1}! Response length: ${raw.length} chars`);
        consecutiveFailures = 0; // Reset failure counter on success
        try { 
          const result = extractJsonFromRaw(raw);
          console.log(`📥 Parsed JSON successfully`);
          return result;
        }
        catch(e){ 
          console.error('❌ Failed to parse webhook response:', e, raw.slice(0,400)); 
      throw new Error(`Webhook returned non-JSON response: ${e.message}`);
    }
  } catch (error) {
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
          console.log(`🌐 Network error on attempt ${i+1}:`, error.message);
      throw new Error('Network error: Unable to reach the webhook service');
    }
        if (i === delays.length - 1) throw error;
      }
    }
  } finally {
    webhookInProgress = false;
    console.log(`🏁 Webhook call #${webhookCallCount} completed at ${new Date().toISOString()}`);
    
    // Log current failure state
    if (consecutiveFailures > 0) {
      console.log(`⚠️ Consecutive failures: ${consecutiveFailures}/${MAX_CONSECUTIVE_FAILURES}`);
      if (consecutiveFailures >= MAX_CONSECUTIVE_FAILURES) {
        console.log(`🚫 Webhook temporarily disabled. Will retry in ${WEBHOOK_COOLDOWN * Math.pow(2, consecutiveFailures - MAX_CONSECUTIVE_FAILURES + 1)}ms`);
      }
    }
  }
}

// Manual reset function for debugging
window.resetWebhookFailures = () => {
  consecutiveFailures = 0;
  lastWebhookCall = 0;
  circuitBreakerOpen = false;
  circuitBreakerOpenedAt = 0;
  console.log('🔄 Webhook failure state and circuit breaker manually reset');
};

// Manual refresh function for when users need fresh data
window.refreshData = () => {
  console.log('🔄 Manual refresh requested');
  const currentUrl = window.location.href;
  lastUrl = ''; // Force refresh by clearing last URL
  
  // Clear the cache for this specific combination to force fresh data
  const qs = new URLSearchParams(window.location.search);
  const buildingId = qs.get('buildingId');
  const recordId = qs.get('recordId');
  const transactionId = qs.get('transactionId');
  const cacheKey = `${buildingId}-${recordId || 'no-record'}-${transactionId || 'no-txn'}`;
  
  try {
    const existingCache = localStorage.getItem('buildingDataCache');
    if (existingCache) {
      const cache = JSON.parse(existingCache);
      delete cache[cacheKey];
      localStorage.setItem('buildingDataCache', JSON.stringify(cache));
      console.log('🗑️ Cleared cache for:', cacheKey);
    }
  } catch (error) {
    console.warn('Failed to clear cache:', error);
  }
  
  fetchData().catch(console.error);
};

// Function to clear all cached data
window.clearAllCache = () => {
  try {
    localStorage.removeItem('buildingDataCache');
    console.log('🗑️ All cached data cleared');
  } catch (error) {
    console.warn('Failed to clear cache:', error);
  }
};

// Function to show current cache status
window.showCacheStatus = () => {
  try {
    const storedCache = localStorage.getItem('buildingDataCache');
    if (storedCache) {
      const cache = JSON.parse(storedCache);
      const keys = Object.keys(cache);
      console.log('📊 Cache Status:');
      console.log('   Total entries:', keys.length);
      console.log('   Cache keys:', keys);
      
      // Show current page's cache key
      const qs = new URLSearchParams(window.location.search);
      const buildingId = qs.get('buildingId');
      const recordId = qs.get('recordId');
      const transactionId = qs.get('transactionId');
      const currentKey = `${buildingId}-${recordId || 'no-record'}-${transactionId || 'no-txn'}`;
      console.log('   Current page key:', currentKey);
      console.log('   Has current data:', !!cache[currentKey]);
      
      // Show similar keys for current building/record
      if (buildingId && recordId) {
        const similarKeys = keys.filter(key => 
          key.includes(buildingId) && key.includes(recordId)
        );
        console.log('   Similar keys for current building/record:', similarKeys);
        if (similarKeys.length > 0) {
          console.log('   Most recent similar key:', similarKeys.sort().pop());
          
          // Show what data is available in the most recent similar key
          const mostRecentKey = similarKeys.sort().pop();
          const mostRecentData = cache[mostRecentKey];
          console.log('   Data available in most recent key:');
          console.log('     - Basic info (fees, policies):', !!(mostRecentData.fees || mostRecentData.feePolicies || mostRecentData.buildingPolicies));
          console.log('     - Detailed info (unit data):', !!(mostRecentData.PAIDFORUNITINFO || mostRecentData.unitInfo));
        }
      }
    } else {
      console.log('📊 Cache Status: No cached data found');
    }
  } catch (error) {
    console.warn('Failed to show cache status:', error);
  }
};

// Function to find and use cached data for current building/record
window.findCachedData = () => {
  try {
    const qs = new URLSearchParams(window.location.search);
    const buildingId = qs.get('buildingId');
    const recordId = qs.get('recordId');
    
    if (!buildingId || !recordId) {
      console.log('❌ Need both buildingId and recordId to search cache');
      return;
    }
    
    const storedCache = localStorage.getItem('buildingDataCache');
    if (storedCache) {
      const cache = JSON.parse(storedCache);
      const similarKeys = Object.keys(cache).filter(key => 
        key.includes(buildingId) && key.includes(recordId)
      );
      
      if (similarKeys.length > 0) {
        const mostRecentKey = similarKeys.sort().pop();
        const cachedData = cache[mostRecentKey];
        console.log('🔍 Found cached data for:', mostRecentKey);
        console.log('📊 Data keys:', Object.keys(cachedData));
        
        // Update URL with the cached transactionId
        const keyParts = mostRecentKey.split('-');
        if (keyParts.length >= 3) {
          const cachedTransactionId = keyParts.slice(2).join('-');
          if (cachedTransactionId && cachedTransactionId !== 'no-txn') {
            const url = new URL(window.location.href);
            url.searchParams.set('transactionId', cachedTransactionId);
            window.history.replaceState({}, '', url.toString());
            console.log('🔄 Updated URL with cached transactionId:', cachedTransactionId);
            
            // Render the cached data
            const normalized = Array.isArray(cachedData) ? (cachedData[0] || {}) : cachedData;
            hideLoadingState();
            render(normalized);
            return;
          }
        }
      } else {
        console.log('❌ No cached data found for current building/record');
      }
    } else {
      console.log('❌ No cache found in localStorage');
    }
  } catch (error) {
    console.warn('Failed to find cached data:', error);
  }
};

/* ---------- config ---------- */
const MAX_DOC_LINKS = Infinity;
const byId = id => document.getElementById(id);
const fallback = '-';

/* helpers */
const meaningful = (v)=>{
  if (v == null) return false;
  if (Array.isArray(v)) return v.some(meaningful);
  if (typeof v === 'object') return Object.values(v).some(meaningful);
  const s = String(v).trim();
  if (!s) return false;
  return !['-','n/a','na','not applicable','none','null','undefined'].includes(s.toLowerCase());
};
const val = (obj,key)=>{ const raw = obj?.[key]; return meaningful(raw) ? (typeof raw === 'number' ? raw : String(raw).trim()) : fallback; };
const dollar = v => meaningful(v) ? `$${v}` : fallback;

const ESC_MAP = { '&':'&amp;', '<':'&lt;', '>':'&gt;', '"':'&quot;', "'":'&#39;' };
const esc = s => String(s).replace(/[&<>"']/g, ch => ESC_MAP[ch]);
const htmlize = s => esc(s).replace(/\n/g,'<br>');

const renderRow = (label, valueHtml)=> `<div class="data-row"><span class="label">${label}</span><div class="value">${valueHtml}</div></div>`;
const renderClamped = (text)=> {
  const content = htmlize(String(text));
    return `<div class="clamp-wrap" data-expanded="false"><div class="clamp-text">${content}</div><button class="toggle" type="button" aria-expanded="false" title="Expand">…</button></div>`;
  };
const renderRowIf = (label, raw)=>{ if(!meaningful(raw)) return ''; const text = Array.isArray(raw) ? raw.map(x=>String(x).trim()).filter(Boolean).join(', ') : String(raw); return renderRow(label, renderClamped(text)); };

const SPLIT_REGEX = new RegExp('[,;/|•&]+','g');
const splitTokens = (s)=> String(s).replace(/\band\b/gi, ',').split(SPLIT_REGEX).map(t=>t.trim()).filter(Boolean);
const toChipItems = (v) => {
  // Helper function to format amenity names (remove underscores, fix capitalization)
  const formatAmenityName = (name) => {
    return String(name)
      .replace(/_/g, ' ')  // Replace underscores with spaces
      .toLowerCase()       // Convert to lowercase first
      .replace(/^\w/, (letter) => letter.toUpperCase()); // Only capitalize first letter of first word
  };
  
  if (Array.isArray(v)){ return v.flatMap(x => { if (x == null) return []; if (typeof x === 'string') return splitTokens(x).map(formatAmenityName); if (typeof x === 'object' && 'name' in x) return [formatAmenityName(String(x.name).trim())]; return [formatAmenityName(String(x).trim())]; }); }
  if (v && typeof v === 'object'){ const guess = v.value || v.text || v.name || v.label; if (guess) return splitTokens(guess).map(formatAmenityName); }
  if (typeof v === 'string'){ const s = v.trim().replace(/^\[(.*)\]$/,'$1'); try { if (s.startsWith('[') && s.endsWith(']')) return JSON.parse(s).map(x=>formatAmenityName(String(x).trim())).filter(Boolean); } catch{} return splitTokens(s).map(formatAmenityName); }
  return [];
};
const renderChips = (items)=> items.length ? `<div class="pills">${items.map(t=>`<span class="pill">${t}</span>`).join('')}</div>` : '';
const isChipField = (label) => /(utilities\s*included|utilities|hvac|amenities|amenity)/i.test(String(label));

function extractJsonObjects(str){
  const out=[]; let depth=0, start=-1, inStr=false, esc=false;
  for(let i=0;i<str.length;i++){
    const ch=str[i];
    if(inStr){ if(esc){esc=false; continue;} if(ch==='\\'){esc=true; continue;} if(ch==='"'){inStr=false;} continue; }
    if(ch==='"'){ inStr=true; continue; }
    if(ch==='{'){ if(depth===0) start=i; depth++; }
    else if(ch==='}'){ depth--; if(depth===0 && start!==-1){ out.push(str.slice(start, i+1)); start=-1; } }
  }
  return out;
}
function normalizeAttachments(field){
  const out=[];
  const pushMaybe = att=>{ if(!att||!att.url) return; const url=String(att.url).replace(/\s/g,'%20'); if(!out.some(x=>x.url===url)) out.push({ url, filename: att.filename || 'Policy' }); };
  const fromString = s=>{
    const str=s.trim();
    if(str.startsWith('{') && str.endsWith('}')){ try{ pushMaybe(JSON.parse(str)); return; }catch{} }
    const blobs=extractJsonObjects(str);
    if(blobs.length){ blobs.forEach(b=>{ try{ pushMaybe(JSON.parse(b)); }catch{} }); return; }
    (str.match(/https?:\/\/[^\s"']+/g)||[]).forEach(u=>pushMaybe({url:u, filename:'Policy'}));
  };
  const fromEntry = e=>{ if(!e) return; if(Array.isArray(e)) e.forEach(fromEntry); else if(typeof e==='object') pushMaybe(e); else if(typeof e==='string') fromString(e); };
  fromEntry(field);
  return out;
}
const uniqueByUrl = arr => { const s=new Set(); return arr.filter(a => (a.url && !s.has(a.url)) ? (s.add(a.url), true) : false); };
  
  // Format numbers with commas and handle percentages
  const formatNumber = (num, isPercentage = false, isMoney = false) => {
    if (num == null || num === '') return '';
    const parsed = parseFloat(num);
    if (isNaN(parsed)) return String(num);
    
    if (isPercentage) {
      return parsed.toLocaleString('en-US', { 
        minimumFractionDigits: 4, 
        maximumFractionDigits: 4 
      }) + '%';
    } else if (isMoney) {
      return '$' + parsed.toLocaleString('en-US', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 2 
      });
    }
    
    return parsed.toLocaleString('en-US');
  };

/* ---------- render ---------- */
function render(data){
  const feesEl = byId('fees-section');
  const feePoliciesEl = byId('fee-policies-section');
  const buildingPoliciesEl = byId('building-policies-section');
  const appDocsEl = byId('application-documents-section');
  if(!feesEl || !feePoliciesEl || !buildingPoliciesEl) return;

  const fees = data.fees || {};
  const feePolicies = data.feePolicies || {};
  const buildingPolicies = data.buildingPolicies || {};
  const paidFlag = !!(data['PAID?'] || data['PAID? '] || data.paid || data.PAID);

  // If paid, hide price badge and purchase button
  try {
    if (paidFlag) {
      const badge = document.querySelector('.paid-badge');
      if (badge) badge.style.display = 'none';
      const cta = document.querySelector('.purchase-cta--detail');
      if (cta) cta.style.display = 'none';
      // Remove any blurred placeholder rows when paid
      document.querySelectorAll('#unit-specific-info-section .data-row, #building-info-section .data-row')
        .forEach(row => { if (row.querySelector('.hidden-pill')) row.remove(); });
    }
  } catch {}

  const salesHtml = [
              renderRowIf('Application fee', dollar(val(fees.sales||{}, 'Sale building application fee'))),
        renderRowIf('Move-in fee', dollar(val(fees.sales||{}, 'Sale move in fee'))),
        renderRowIf('Move-out fee', dollar(val(fees.sales||{}, 'Sale move out fee'))),
        renderRowIf('Move-in deposit', dollar(val(fees.sales||{}, 'Sale move in deposit'))),
        renderRowIf('Move-out deposit', dollar(val(fees.sales||{}, 'Sale move out deposit'))),
  ].join('');

  const leaseHtml = [
              renderRowIf('Application fee', dollar(val(fees.leases||{}, 'Lease building application fee'))),
        renderRowIf('Move-in fee', dollar(val(fees.leases||{}, 'Lease move in fee'))),
        renderRowIf('Move-out fee', dollar(val(fees.leases||{}, 'Lease move out fee'))),
        renderRowIf('Move-in deposit', dollar(val(fees.leases||{}, 'Lease move in deposit'))),
        renderRowIf('Move-out deposit', dollar(val(fees.leases||{}, 'Lease move out deposit'))),
  ].join('');

  const altPct = val(fees.alterations||{}, 'Alteration sec deposit (%)');
          const altHtml = meaningful(altPct) ? renderRow('Alteration security deposit (%)', `${altPct}%`) : '';

  feesEl.innerHTML =
    `${salesHtml ? '<h4>Sales</h4>'+salesHtml : ''}${leaseHtml ? '<h4>Leases</h4>'+leaseHtml : ''}${altHtml ? '<h4>Alterations</h4>'+altHtml : ''}`
    || renderRow('Fees','No fee data');

  const feePolicyRows = [
    ['Flip Tax', val(feePolicies,'Flip Tax')],
    ['Sublet Fee', val(feePolicies,'Sublet Fee')],
    ['Capital Contribution', val(feePolicies,'Capital Contribution')],
  ].map(([label,value])=>renderRowIf(label, value)).join('');
          feePoliciesEl.innerHTML = feePolicyRows || renderRow('Fee policies','No policy data');

  const rows=[];
  const preferredOrder = ['LLCs allowed','Pied a terre','Trusts allowed','Gifting allowed?','Co-purchasing allowed?','Fee simple','Right of First Refusal','Pet Policy','Sublet policy?','HVAC','Utilities included'];
  const keySet = new Set(Object.keys(buildingPolicies));
  const visited = new Set();

  console.log('Building policies available:', buildingPolicies);
  console.log('Building policies keys:', Object.keys(buildingPolicies));
  console.log('Looking for amenities in buildingPolicies:', buildingPolicies.amenities || buildingPolicies.amenity);

  const subletKey = Array.from(keySet).find(k => k.toLowerCase().startsWith('sublet policy'));

  const subletDocField = data.Documents?.['Sublet policy document'] ?? buildingPolicies['Sublet policy document'];
  const subletProofField = feePolicies['Proof for policies and fees'] ?? buildingPolicies['Proof for policies and fees'] ?? data.Documents?.['Proof for policies and fees'];
    const subletLinks = uniqueByUrl([...normalizeAttachments(subletDocField), ...normalizeAttachments(subletProofField)]).slice(0, MAX_DOC_LINKS);

  const renderOne = (k, v)=>{
    if (!meaningful(v)) return;
    if (isChipField(k)) {
      const items = toChipItems(v);
      if (items.length){ rows.push(renderRow(k, renderChips(items))); return; }
    }
    if (subletKey && k === subletKey && subletLinks.length){
        const icon = `\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g clip-path=\"url(#clip0_672_10332)\">\n<path d=\"M20 22H4C3.73478 22 3.48043 21.8946 3.29289 21.7071C3.10536 21.5196 3 21.2652 3 21V3C3 2.73478 3.10536 2.48043 3.29289 2.29289C3.48043 2.10536 3.73478 2 4 2H20C20.2652 2 20.5196 2.10536 20.7071 2.29289C20.8946 2.48043 21 2.73478 21 3V21C21 21.2652 20.8946 21.5196 20.7071 21.7071C20.5196 21.8946 20.2652 22 20 22ZM19 20V4H5V20H19ZM8 7H16V9H8V7ZM8 11H16V13H8V11ZM8 15H16V17H8V15Z\" fill=\"#2563EB\"/>\n</g>\n<defs>\n<clipPath id=\"clip0_672_10332\">\n<rect width=\"24\" height=\"24\" fill=\"white\"/>\n</clipPath>\n</defs>\n</svg>`;
        const links = subletLinks.map((a,i)=>`<a class=\"file-link\" href=\"${a.url}\" target=\"_blank\" rel=\"noopener\">${icon} Policy ${i+1}</a>`).join('');
        rows.push(renderRow(k, `<div class=\"stack-links\">${links}</div>`));
      return;
    }
    const text = Array.isArray(v) ? v.map(x => String(x).trim()).filter(Boolean).join(', ') : String(v);
    rows.push(renderRow(k, renderClamped(text)));
  };

  preferredOrder.forEach(label => {
    const actualKey = (label.toLowerCase().startsWith('sublet policy')) ? (subletKey || label) : label;
    if (keySet.has(actualKey)){
      visited.add(actualKey);
      renderOne(actualKey, buildingPolicies[actualKey]);
    }
  });
  Array.from(keySet).forEach(k => { if (!visited.has(k)) renderOne(k, buildingPolicies[k]); });

  buildingPoliciesEl.innerHTML = rows.join('') || renderRow('Policies','No policy data');

  // Populate paid-only fields when available and paid is true
  try {
    if (paidFlag) {
      const paid = data.PAIDFORUNITINFO || data.paidForUnitInfo || {};
      console.log('Full data structure:', data);
      console.log('PAIDFORUNITINFO structure:', data.PAIDFORUNITINFO);
      console.log('paid variable:', paid);
      
      const unitInfoEl = byId('unit-specific-info-section');
      const bldgInfoEl = byId('building-info-section');
      // Helper: unique paid rows (avoid duplicates across re-renders)
      const renderPaidRow = (label, valueHtml) => {
        const html = renderRow(label, valueHtml).replace('data-row"', 'data-row paid-insert"');
        return html;
      };
      // Clear any previously injected paid rows on re-render
      document.querySelectorAll('.paid-insert').forEach(n=> n.parentNode && n.parentNode.removeChild(n));
      // Finder helper available for both sections
      const findVal = (obj, matcher) => { for (const [k,v] of Object.entries(obj||{})) if (matcher(k) && meaningful(v)) return v; return null; };
      if (unitInfoEl) {
        // Current owners and % common — only if both exist
        const owners = paid['Current Owners'] ?? paid['currentOwners'] ?? findVal(paid, k=>/current.*owner/i.test(k));
        const percentCommon = paid['%comm'] ?? findVal(paid, k=>/(%|percent).*comm/i.test(k));
        if (meaningful(owners) && meaningful(percentCommon)) {
          unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Current Owners / % Common', `${owners} — ${percentCommon}`));
        } else if (meaningful(owners)) {
          unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Current Owners', String(owners)));
        }

        // Beds / Baths / Sq Ft — only show those that exist (each as its own row)
        const beds = paid['beds'] ?? findVal(paid, k=>/bed/i.test(k));
        const baths = paid['bath'] ?? findVal(paid, k=>/bath/i.test(k));
        const sqFt = paid['Unit Sq Foot'] ?? paid['Unit Sq  Foot'] ?? paid['sqFoot'] ?? paid['sqft'] ?? findVal(paid, k=>/(unit\s*sq|sq\s*ft|square)/i.test(k));
        if (meaningful(beds)) unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Bedrooms', formatNumber(beds)));
        if (meaningful(baths)) unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Bathrooms', formatNumber(baths)));
        if (meaningful(sqFt)) unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Square Footage', formatNumber(sqFt) + ' sq ft'));

        // Percent ownership fields - moved from building info to unit specific info
        const percentOwnership = paid['Percent Ownership'] ?? paid['percentOwnership'] ?? findVal(paid, k=>/percent.*ownership(?!.*vot)/i.test(k));
        if (meaningful(percentOwnership)) unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Percent ownership', formatNumber(percentOwnership, true)));
        const percentOwnershipVoting = paid['Percent Ownership Voting'] ?? paid['percentOwnershipVoting'] ?? findVal(paid, k=>/percent.*ownership.*vot/i.test(k));
        if (meaningful(percentOwnershipVoting)) unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Percent ownership (voting)', formatNumber(percentOwnershipVoting, true)));

        // Number of shares
        const shares = paid['Number of shares'] ?? findVal(paid, k=>/share/i.test(k));
        if (meaningful(shares)) {
          unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Number of Shares', formatNumber(shares)));
        }

        // Monthly Common Charges - moved to be first before any assessments
        const monthlyTxt = paid['Monthly common charges'];
        if (meaningful(monthlyTxt)) {
          // Parse lines like: "Recurring monthly charges as of 2025-08-01:\nLocal Law 97 & Roof Capital Assessment:  $726\nMonthly Common Charges:  $1212.56"
          const lines = String(monthlyTxt).split(/\n+/).map(s=>s.trim()).filter(Boolean);
          // Extract entries after the first line (date info)
          const entries = [];
          let asOf = '';
          if (/recurring\s+monthly\s+charges\s+as\s+of/i.test(lines[0]||'')) {
            asOf = lines[0].replace(/.*as\s+of\s+/i,'').replace(/:$/,'').trim();
          }
          for (let i=1;i<lines.length;i++){
            const m = lines[i].match(/^([^:]+):\s*\$?\s*([0-9.,]+)/i);
            if (m){ entries.push({ label: m[1].trim(), amount: m[2] }); }
          }
          // Preferentially render Monthly Common Charges and Local Law 97 first, then others
          const pickup = (predicate)=> entries.find(e=> predicate(e.label.toLowerCase()));
          const mcc = pickup(l=> /monthly\s*common\s*charges|common\s*charges/.test(l));
          const ll97 = entries.find(e=> /local\s*law\s*97|roof\s*capital/i.test(e.label.toLowerCase()));
          const others = entries.filter(e=> e!==mcc && e!==ll97);
          if (mcc) unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Monthly Common Charges', formatNumber(mcc.amount, false, true)));
          if (ll97) unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Local Law 97 & Roof Capital Assessment', formatNumber(ll97.amount, false, true)));
          // Any additional recurring charges
          others.forEach(e=>{
            unitInfoEl.insertAdjacentHTML('beforeend', renderPaidRow(e.label, formatNumber(e.amount, false, true)));
          });
        }
      }
      if (bldgInfoEl) {
        // Building-level paid fields - Legal name first, then others
        console.log('Full paid data structure:', paid);
        console.log('All available keys in paid data:', Object.keys(paid));
        
        const legalName = paid['legal name'] ?? findVal(paid, k=>/legal\s*name/i.test(k));
        if (meaningful(legalName)) bldgInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Legal name', String(legalName)));

        const built = paid['built'] ?? findVal(paid, k=>/built/i.test(k));
        if (meaningful(built)) bldgInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Built', String(built)));

        const converted = paid['converted'] ?? findVal(paid, k=>/converted/i.test(k));
        if (meaningful(converted)) bldgInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Converted', String(converted)));

        const floors = paid['floors'] ?? findVal(paid, k=>/floor(s)?/i.test(k));
        if (meaningful(floors)) bldgInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Floors', formatNumber(floors)));

        const bSqFt = paid['building sq foot'] ?? paid['building sqft'] ?? findVal(paid, k=>/building.*(sq\s*ft|square)/i.test(k));
        if (meaningful(bSqFt)) bldgInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Building sq ft', formatNumber(bSqFt) + ' sq ft'));

        // Amendment numbers field
        const amendmentNumbers = paid['amendment numbers'] ?? paid['amendment number'] ?? paid['amendment'] ?? paid['amendments'] ?? findVal(paid, k=>/amendment.*number|amendment/i.test(k));
        console.log('Amendment numbers search:', { 
          direct1: paid['amendment numbers'], 
          direct2: paid['amendment number'],
          direct3: paid['amendment'],
          direct4: paid['amendments'],
          found: amendmentNumbers,
          allKeys: Object.keys(paid).filter(k => /amendment/i.test(k))
        });
        if (meaningful(amendmentNumbers)) bldgInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Amendment numbers', String(amendmentNumbers)));

        // Amenities field - displayed as tags similar to HVAC and utilities
        const amenities = paid['amenities'] ?? paid['amenity'] ?? paid['building amenities'] ?? paid['building amenity'] ?? findVal(paid, k=>/amenities|amenity|facilities|features/i.test(k));
        console.log('Amenities search:', { 
          direct1: paid['amenities'], 
          direct2: paid['amenity'],
          direct3: paid['building amenities'],
          direct4: paid['building amenity'],
          found: amenities,
          allKeys: Object.keys(paid).filter(k => /amenities|amenity|facilities|features/i.test(k))
        });
        if (meaningful(amenities)) {
          const amenityItems = toChipItems(amenities);
          if (amenityItems.length) {
            bldgInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Amenities', renderChips(amenityItems)));
          } else {
            bldgInfoEl.insertAdjacentHTML('beforeend', renderPaidRow('Amenities', String(amenities)));
          }
        }

        // New unit breakdown fields - displayed in 4-column grid format
        const ownerOccupying = paid['Owner occupying units'] ?? paid['Owner occupying'] ?? findVal(paid, k=>/owner.*occupying/i.test(k));
        const piedeTerre = paid['Pied e terre'] ?? paid['Pied a terre'] ?? findVal(paid, k=>/pied.*terre/i.test(k));
        const rentedUnits = paid['Rented/investment units'] ?? paid['Rented units'] ?? paid['Investment units'] ?? findVal(paid, k=>/rented|investment.*units/i.test(k));
        const sponsorUnits = paid['Sponsor units'] ?? paid['Sponsor owned'] ?? findVal(paid, k=>/sponsor.*units|sponsor.*owned/i.test(k));
        const sponsorRenterUnits = paid['Sponsor renter units'] ?? paid['Sponsor rented'] ?? findVal(paid, k=>/sponsor.*renter|sponsor.*rented/i.test(k));
        const commercialUnits = paid['Commercial units'] ?? paid['Commercial'] ?? findVal(paid, k=>/commercial.*units|commercial/i.test(k));
        const superUnit = paid['Super unit'] ?? paid['Super units'] ?? findVal(paid, k=>/super.*unit/i.test(k));

        // Create unit breakdown section with 4-column grid layout
        if (meaningful(ownerOccupying) || meaningful(piedeTerre) || meaningful(rentedUnits) || 
            meaningful(sponsorUnits) || meaningful(sponsorRenterUnits) || meaningful(commercialUnits) || meaningful(superUnit)) {
          
          // Create 4-column grid layout
          const unitBreakdownGrid = `<div class="data-row unit-breakdown-grid">
            <div class="value unit-breakdown-4col">
              <div class="grid-col">
                <div class="grid-item">
                  <span class="grid-label">Unit count (excluding commercial units)</span>
                  <span class="grid-value">${formatNumber(parseInt(ownerOccupying || 0) + parseInt(piedeTerre || 0) + parseInt(rentedUnits || 0) + parseInt(sponsorUnits || 0) + parseInt(sponsorRenterUnits || 0) + parseInt(superUnit || 0))}</span>
                </div>
                <div class="grid-item">
                  <span class="grid-label">Commercial units</span>
                  <span class="grid-value">${meaningful(commercialUnits) ? formatNumber(commercialUnits) : '0'}</span>
                </div>
              </div>
              <div class="grid-col">
                <div class="grid-item">
                  <span class="grid-label">Owner occupying units</span>
                  <span class="grid-value">${meaningful(ownerOccupying) ? formatNumber(ownerOccupying) : '0'}</span>
                </div>
                <div class="grid-item">
                  <span class="grid-label">Rented/investment units</span>
                  <span class="grid-value">${meaningful(rentedUnits) ? formatNumber(rentedUnits) : '0'}</span>
                </div>
              </div>
              <div class="grid-col">
                <div class="grid-item">
                  <span class="grid-label">Pied-à-terre units</span>
                  <span class="grid-value">${meaningful(piedeTerre) ? formatNumber(piedeTerre) : '0'}</span>
                </div>
                <div class="grid-item">
                  <span class="grid-label">Super unit</span>
                  <span class="grid-value">${meaningful(superUnit) ? formatNumber(superUnit) : '0'}</span>
                </div>
              </div>
              <div class="grid-col">
                <div class="grid-item">
                  <span class="grid-label">Sponsor units</span>
                  <span class="grid-value">${meaningful(sponsorUnits) ? formatNumber(sponsorUnits) : '0'}</span>
                </div>
                <div class="grid-item">
                  <span class="grid-label">Sponsor renter units</span>
                  <span class="grid-value">${meaningful(sponsorRenterUnits) ? formatNumber(sponsorRenterUnits) : '0'}</span>
                </div>
              </div>
            </div>
          </div>`;
          
          // Insert the header first, then the grid below it
          bldgInfoEl.insertAdjacentHTML('beforeend', '<h4>Unit Breakdown</h4>');
          bldgInfoEl.insertAdjacentHTML('beforeend', unitBreakdownGrid);
        }
      }
    }
  } catch {}

  // If not paid, blur placeholders for any non-empty computed rows and hide sections that would be empty
  try {
    if (!paidFlag) {
      const maskRow = (label)=> renderRow(label, '<span class="hidden-pill">Hidden</span>');
      const unitInfoEl = byId('unit-specific-info-section');
      const bldgInfoEl = byId('building-info-section');
      if (unitInfoEl && unitInfoEl.children.length === 0) {
        const placeholders = [
          'Monthly common charges',
          'Current assessments',
          'Number of shares',
          'Property taxes',
          'Maintenance history'
        ].map(maskRow).join('');
        unitInfoEl.innerHTML = placeholders;
      }
      if (bldgInfoEl && bldgInfoEl.children.length === 0) {
        const placeholders = [
          'Owner occupying units',
          'Pied-à-terre units',
          'Rented/investment units',
                      'Sponsor units',
            'Sponsor renter units',
                      'Commercial units',
            'Super unit'
        ].map(maskRow).join('');
        bldgInfoEl.innerHTML = placeholders;
      }
    }
  } catch {}

  requestAnimationFrame(()=>{
    document.querySelectorAll('.clamp-wrap').forEach(wrap=>{
      const text = wrap.querySelector('.clamp-text');
      if (!text) return;
      text.style.display = 'block';
      const lineHeight = parseInt(window.getComputedStyle(text).lineHeight) || 20;
      const maxHeight = lineHeight * 3;
      const actualHeight = text.scrollHeight;
      const overflow = actualHeight > maxHeight + 1; // strictly more than 3 lines
      text.style.display = '-webkit-box';
      wrap.setAttribute('data-overflow', overflow ? 'true' : 'false');
      const t = wrap.querySelector('.toggle');
      if (t) t.style.display = overflow ? 'inline-block' : 'none';
    });
  });

  if (appDocsEl) {
    const portalUrl = 'https://transfers.joindaisy.com/';
    const qsParams = new URLSearchParams(window.location.search);
    const fromDataBuildingId = (data && (data.buildingId || data.BuildingId || data.id)) || '';
    const buildingIdParam = qsParams.get('buildingId') || fromDataBuildingId || '';
    const unitIdParam = qsParams.get('unitId') || qsParams.get('unit') || '';
    const recordIdParam = qsParams.get('recordId') || '';
    const transactionIdParam = qsParams.get('transactionId') || '';
    const withParams = (base, params) => {
      try { const url = new URL(base); Object.entries(params).forEach(([k, v]) => { if (v != null && String(v).trim() !== '') url.searchParams.set(k, String(v)); }); return url.toString(); }
      catch { const nonEmpty = Object.entries(params).filter(([,v]) => v != null && String(v).trim() !== ''); if (!nonEmpty.length) return base; const query = nonEmpty.map(([k,v]) => `${encodeURIComponent(k)}=${encodeURIComponent(String(v))}`).join('&'); return base + (base.includes('?') ? '&' : '?') + query; }
    };
    const portalWithParams = withParams(portalUrl, { buildingId: buildingIdParam, unitId: unitIdParam, transactionId: transactionIdParam });
    const salesFormUrl = withParams('https://transfers.joindaisy.com/sales-form', { recordId: recordIdParam, buildingId: buildingIdParam, transactionId: transactionIdParam });
    const alterationsEduUrl = withParams('https://transfers.joindaisy.com/alterations-education', { buildingId: buildingIdParam, recordId: recordIdParam });
    const salesPortalHref = recordIdParam ? salesFormUrl : withParams('https://transfers.joindaisy.com/sales', { buildingId: buildingIdParam, transactionId: transactionIdParam });
    const alterationsPlatformHref = recordIdParam ? alterationsEduUrl : withParams('https://transfers.joindaisy.com/alterations', { buildingId: buildingIdParam, transactionId: transactionIdParam });

    const raw = data.Documents?.['Sales/Alteration Documents'];
    const typeToDocs = { SALES_APPLICATION: [], ALTERATION_AGREEMENT: [] };

    const considerDoc = (doc)=>{
      if (!doc || !doc.type) return;
      const type = String(doc.type).toUpperCase();
      if (!(type in typeToDocs)) return;
      const url = doc.file?.signedPaths?.signedPath || doc.file?.signedPath || doc.file?.url;
      if (!url) return;
      const createdAt = Number(doc.createdAt) || 0;
      typeToDocs[type].push({ url, createdAt });
    };

    const parseEntry = (entry)=>{
      if (!entry) return;
      if (typeof entry === 'string') {
        try {
          const obj = JSON.parse(entry);
          if (Array.isArray(obj)) obj.forEach(considerDoc);
          else if (obj && Array.isArray(obj.documents)) obj.documents.forEach(considerDoc);
          else if (obj && obj.documentId) considerDoc(obj);
          else extractJsonObjects(entry).forEach(chunk => { try { considerDoc(JSON.parse(chunk)); } catch {} });
        } catch {
          extractJsonObjects(entry).forEach(chunk => { try { const obj = JSON.parse(chunk); if (obj && Array.isArray(obj.documents)) obj.documents.forEach(considerDoc); else considerDoc(obj); } catch {} });
        }
        return;
      }
      if (Array.isArray(entry)) { entry.forEach(parseEntry); return; }
      if (entry && typeof entry === 'object') { if (Array.isArray(entry.documents)) { entry.documents.forEach(considerDoc); return; } considerDoc(entry); }
    };

    parseEntry(raw);

    const latestOf = (type) => { const list = typeToDocs[type]; if (!list || !list.length) return null; list.sort((a,b)=> b.createdAt - a.createdAt); return list[0].url; };

    const salesAppUrl = latestOf('SALES_APPLICATION');
    const alterationUrl = latestOf('ALTERATION_AGREEMENT');

    const sections = [];
    const fileIcon = `\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g clip-path=\"url(#clip0_672_10332)\">\n<path d=\"M20 22H4C3.73478 22 3.48043 21.8946 3.29289 21.7071C3.10536 21.5196 3 21.2652 3 21V3C3 2.73478 3.10536 2.48043 3.29289 2.29289C3.48043 2.10536 3.73478 2 4 2H20C20.2652 2 20.5196 2.10536 20.7071 2.29289C20.8946 2.48043 21 2.73478 21 3V21C21 21.2652 20.8946 21.5196 20.7071 21.7071C20.5196 21.8946 20.2652 22 20 22ZM19 20V4H5V20H19ZM8 7H16V9H8V7ZM8 11H16V13H8V11ZM8 15H16V17H8V15Z\" fill=\"#2563EB\"/>\n</g>\n<defs>\n<clipPath id=\"clip0_672_10332\">\n<rect width=\"24\" height=\"24\" fill=\"white\"/>\n</clipPath>\n</defs>\n</svg>`;
    const portalIcon = `\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g clip-path=\"url(#clip0_672_14916)\">\n<path d=\"M10 3V5H5V19H19V14H21V20C21 20.2652 20.8946 20.5196 20.7071 20.7071C20.5196 20.8946 20.2652 21 20 21H4C3.73478 21 3.48043 20.8946 3.29289 20.7071C3.10536 20.5196 3 20.2652 3 20V4C3 3.73478 3.10536 3.48043 3.29289 3.29289C3.48043 3.10536 3.73478 3 4 3H10ZM17.586 5H13V3H21V11H19V6.414L12 13.414L10.586 12L17.586 5Z\" fill=\"#2563EB\"/>\n</g>\n<defs>\n<clipPath id=\"clip0_672_14916\">\n<rect width=\"24\" height=\"24\" fill=\"white\"/>\n</clipPath>\n</defs>\n</svg>`;
    const fileLink = (url,label)=> url ? `<a class=\"file-link\" href=\"${url}\" target=\"_blank\" rel=\"noopener\">${fileIcon} ${label}</a>` : '-';
    const portalLink = (url,label)=> `<a class=\"portal-link\" href=\"${url}\" target=\"_blank\" rel=\"noopener\">${portalIcon} ${label}</a>`;
            sections.push(`<h4>Sales</h4>` + renderRow('Sales application', fileLink(salesAppUrl,'Download PDF')) + renderRow('Sales portal', portalLink(salesPortalHref,'Access online')));
        sections.push(`<h4>Alterations</h4>` + renderRow('Alteration agreement', fileLink(alterationUrl,'Download PDF')) + renderRow('Alteration platform', portalLink(alterationsPlatformHref,'Access online')));
        sections.push(`<h4>Leases</h4>` + renderRow('Daisy transfers portal', portalLink(portalWithParams,'Apply online')));
    appDocsEl.innerHTML = sections.join('');
  }
}
})();
</script>
